diff --git a/dlls/winex11.drv/wintab.c b/dlls/winex11.drv/wintab.c
index 48fcb22100c..f4e5440cc85 100644
--- a/dlls/winex11.drv/wintab.c
+++ b/dlls/winex11.drv/wintab.c
@@ -265,6 +265,7 @@ static int           proximity_in_type;
 static int           proximity_out_type;
 
 static HWND          hwndTabletDefault;
+static HWND          gActiveOwner;
 static WTPACKET      gMsgPacket;
 static DWORD         gSerial;
 
@@ -865,7 +866,11 @@ static BOOL motion_event( HWND hwnd, XEvent *event )
                                            * (gMsgPacket.pkStatus & TPS_INVERT?-1:1));
     gMsgPacket.pkNormalPressure = motion->axis_data[2];
     gMsgPacket.pkButtons = get_button_state(curnum);
-    SendMessageW(hwndTabletDefault,WT_PACKET,gMsgPacket.pkSerialNumber,(LPARAM)hwnd);
+
+    if (gMsgPacket.pkOrientation.orAltitude < 0)
+        return FALSE;
+
+    SendMessageW(hwndTabletDefault,WT_PACKET,gMsgPacket.pkSerialNumber,(LPARAM)gActiveOwner);
     return TRUE;
 }
 
@@ -895,7 +900,11 @@ static BOOL button_event( HWND hwnd, XEvent *event )
                                            * (gMsgPacket.pkStatus & TPS_INVERT?-1:1));
     gMsgPacket.pkNormalPressure = button->axis_data[2];
     gMsgPacket.pkButtons = get_button_state(curnum);
-    SendMessageW(hwndTabletDefault,WT_PACKET,gMsgPacket.pkSerialNumber,(LPARAM)hwnd);
+
+    if (gMsgPacket.pkOrientation.orAltitude < 0)
+        return FALSE;
+
+    SendMessageW(hwndTabletDefault,WT_PACKET,gMsgPacket.pkSerialNumber,(LPARAM)gActiveOwner);
     return TRUE;
 }
 
@@ -946,7 +955,8 @@ static BOOL proximity_event( HWND hwnd, XEvent *event )
      */
     proximity_info = MAKELPARAM((event->type == proximity_in_type),
                      (event->type == proximity_in_type) || (event->type == proximity_out_type));
-    SendMessageW(hwndTabletDefault, WT_PROXIMITY, (WPARAM)hwnd, proximity_info);
+
+    SendMessageW(hwndTabletDefault, WT_PROXIMITY, (WPARAM)gActiveOwner, proximity_info);
     return TRUE;
 }
 
@@ -963,12 +973,12 @@ int CDECL X11DRV_AttachEventQueueToTablet(HWND hOwner)
     XDeviceInfo     *target = NULL;
     XDevice         *the_device;
     XEventClass     event_list[7];
-    Window          win = X11DRV_get_whole_window( hOwner );
-
-    if (!win || !xinput_handle) return 0;
+    Window          win = X11DRV_get_whole_window(GetDesktopWindow());
 
     TRACE("Creating context for window %p (%lx)  %i cursors\n", hOwner, win, gNumCursors);
 
+    gActiveOwner = hOwner;
+
     devices = pXListInputDevices(data->display, &num_devices);
 
     X11DRV_expect_error(data->display,Tablet_ErrorHandler,NULL);
diff --git a/dlls/wintab32/context.c b/dlls/wintab32/context.c
index 2993c4707e7..85b81c9b735 100644
--- a/dlls/wintab32/context.c
+++ b/dlls/wintab32/context.c
@@ -409,7 +409,8 @@ static UINT WTInfoT(UINT wCategory, UINT nIndex, LPVOID lpOutput, BOOL bUnicode)
             pWTInfoW(wCategory, nIndex, &buf);
 
             /*  Handle system extents here, as we can use user32.dll code to set them */
-            if(wCategory == WTI_DEFSYSCTX)
+            if ((wCategory == WTI_DEFSYSCTX) ||
+                (wCategory == WTI_DDCTXS && nIndex == 0))
             {
                 buf.lcSysExtX = GetSystemMetrics(SM_CXSCREEN);
                 buf.lcSysExtY = GetSystemMetrics(SM_CYSCREEN);
				 