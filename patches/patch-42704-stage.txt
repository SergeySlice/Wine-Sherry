commit 57762cd64ad4455af295620a407dab612ed41805
Author: Sergey Isakov <isakov-sl@bk.ru>
Date:   Mon Feb 11 19:48:11 2019 +0300

    apply staging 42704
    
    Signed-off-by: Sergey Isakov <isakov-sl@bk.ru>

diff --git a/dlls/bcrypt/bcrypt.spec b/dlls/bcrypt/bcrypt.spec
index 78824d7..f4d9a57 100644
--- a/dlls/bcrypt/bcrypt.spec
+++ b/dlls/bcrypt/bcrypt.spec
@@ -8,6 +8,7 @@
 @ stdcall BCryptDecrypt(ptr ptr long ptr ptr long ptr long ptr long)
 @ stub BCryptDeleteContext
 @ stub BCryptDeriveKey
+@ stdcall BCryptDeriveKeyPBKDF2(ptr ptr long ptr long int64 ptr long long)
 @ stdcall BCryptDestroyHash(ptr)
 @ stdcall BCryptDestroyKey(ptr)
 @ stub BCryptDestroySecret
diff --git a/dlls/bcrypt/bcrypt_main.c b/dlls/bcrypt/bcrypt_main.c
index c236491..9427ea7 100644
--- a/dlls/bcrypt/bcrypt_main.c
+++ b/dlls/bcrypt/bcrypt_main.c
@@ -1343,6 +1343,169 @@ NTSTATUS WINAPI BCryptSetProperty( BCRYPT_HANDLE handle, const WCHAR *prop, UCHA
     }
 }
 
+NTSTATUS PBKDF2_F( BCRYPT_ALG_HANDLE algorithm,
+                   UCHAR *password, ULONG password_length,
+                   UCHAR *salt, ULONG salt_length,
+                   ULONGLONG iterations, int i,
+                   UCHAR *res, int hash_length )
+{
+    BCRYPT_HASH_HANDLE handle;
+    NTSTATUS status = STATUS_NOT_SUPPORTED;
+    UCHAR bytes[4];
+    UCHAR *tmp;
+    int j;
+    int k;
+
+    if (!(tmp = heap_alloc( hash_length )))
+    {
+        return STATUS_NO_MEMORY;
+    }
+
+    for (j = 0; j < iterations; j++)
+    {
+        status = BCryptCreateHash( algorithm, &handle, NULL, 0,
+                                   password, password_length, 0 );
+        if (status != STATUS_SUCCESS)
+            goto done;
+
+        if (j == 0)
+        {
+            /* Use salt || INT(i) */
+            status = BCryptHashData( handle, salt, salt_length, 0 );
+            if (status != STATUS_SUCCESS)
+                goto done;
+            bytes[0] = (i >> 24) & 0xFF;
+            bytes[1] = (i >> 16) & 0xFF;
+            bytes[2] = (i >> 8) & 0xFF;
+            bytes[3] = i & 0xFF;
+            status = BCryptHashData( handle, bytes, 4, 0 );
+        }
+        else
+        {
+            /* Use U_j */
+            status = BCryptHashData( handle, tmp, hash_length, 0 );
+        }
+        if (status != STATUS_SUCCESS)
+            goto done;
+
+        status = BCryptFinishHash( handle, tmp, hash_length, 0 );
+        if (status != STATUS_SUCCESS)
+            goto done;
+
+        status = BCryptDestroyHash( handle );
+        if (status != STATUS_SUCCESS)
+            goto done;
+
+        handle = NULL;
+
+        if (j == 0)
+        {
+            /* Copy into res */
+            memcpy( res, tmp, hash_length );
+        }
+        else
+        {
+            /* XOR into res */
+            for (k = 0; k < hash_length; k++)
+                res[k] ^= tmp[k];
+        }
+    }
+
+done:
+    TRACE("<- status 0x%08x\n", status);
+    if(handle)
+        BCryptDestroyHash( handle );
+    heap_free( tmp );
+    return status;
+}
+
+/************************************************************
+ *            BCryptDeriveKeyPBKDF2   (BCRYPT.@)
+ *
+ * Derive a key from a password using the PBKDF2 function
+ * (RFC 2898).
+ *
+ * PARAMS
+ *   handle          [I] Pointer to the PRF provider
+ *   password        [I] Optional pointer to the beginning of the password
+ *   password_length [I] Length of the password
+ *   salt            [I] Optional pointer to the beginning of the salt
+ *   salt_length     [I] Length of the salt
+ *   iterations      [I] Iteration count
+ *   dk              [O] Pointer to the beginning of the buffer to store the
+ *                       derived key in, at least dklen in size
+ *   dklen           [I] Intended length of the derived key, at most
+ *                       (2^32 - 1) * (output length of PRF)
+ *   flags           [I] Reserved, must be zero
+ *
+ * RETURNS
+ *   Success: STATUS_SUCCESS.
+ *   Failure: - STATUS_INVALID_HANDLE
+ *            - STATUS_INVALID_PARAMETER
+ *            - STATUS_NO_MEMORY
+ */
+NTSTATUS WINAPI BCryptDeriveKeyPBKDF2( BCRYPT_ALG_HANDLE handle,
+                                       PUCHAR password, ULONG password_length,
+                                       PUCHAR salt, ULONG salt_length,
+                                       ULONGLONG iterations,
+                                       PUCHAR dk, ULONG dklen,
+                                       ULONG flags )
+{
+    struct algorithm *alg = handle;
+    int hlen = alg_props[alg->id].hash_length;
+    UCHAR *partial;
+    NTSTATUS status;
+    int l;
+    int r;
+    int i;
+
+    TRACE( "%p, %p, %u, %p, %u, %s, %p, %u, %08x - stub\n",
+           handle, password, password_length, salt, salt_length,
+           wine_dbgstr_longlong(iterations), dk, dklen, flags );
+
+    if (dklen <= 0 || dklen > ((((ULONGLONG) 1) << 32) - 1) * hlen)
+    {
+        return STATUS_INVALID_PARAMETER;
+    }
+
+    l = 1 + ((dklen - 1) / hlen); /* ceil(dklen/hlen) */
+    r = dklen - (l - 1) * hlen;
+
+    /* Full blocks */
+    for (i = 1; i < l; i++)
+    {
+        status = PBKDF2_F( handle,
+                           password, password_length,
+                           salt, salt_length,
+                           iterations, i,
+                           dk + ((i - 1) * hlen), hlen );
+        if (status != STATUS_SUCCESS)
+        {
+            return status;
+        }
+    }
+
+    /* Final partial block */
+    if (!(partial = heap_alloc( hlen )))
+    {
+        return STATUS_NO_MEMORY;
+    }
+    status = PBKDF2_F( handle,
+                       password, password_length,
+                       salt, salt_length,
+                       iterations, l,
+                       partial, hlen );
+    if (status != STATUS_SUCCESS)
+    {
+        heap_free( partial );
+        return status;
+    }
+    memcpy( dk + ((l - 1) * hlen), partial, r );
+    heap_free( partial );
+
+    return STATUS_SUCCESS;
+}
+
 BOOL WINAPI DllMain( HINSTANCE hinst, DWORD reason, LPVOID reserved )
 {
     switch (reason)
diff --git a/dlls/bcrypt/tests/bcrypt.c b/dlls/bcrypt/tests/bcrypt.c
index 5240c3b..c635fcb 100644
--- a/dlls/bcrypt/tests/bcrypt.c
+++ b/dlls/bcrypt/tests/bcrypt.c
@@ -36,6 +36,8 @@ static NTSTATUS (WINAPI *pBCryptHashData)(BCRYPT_HASH_HANDLE, PUCHAR, ULONG, ULO
 static NTSTATUS (WINAPI *pBCryptDuplicateHash)(BCRYPT_HASH_HANDLE, BCRYPT_HASH_HANDLE *, UCHAR *, ULONG, ULONG);
 static NTSTATUS (WINAPI *pBCryptFinishHash)(BCRYPT_HASH_HANDLE, PUCHAR, ULONG, ULONG);
 static NTSTATUS (WINAPI *pBCryptDestroyHash)(BCRYPT_HASH_HANDLE);
+static NTSTATUS (WINAPI *pBCryptDeriveKeyPBKDF2)(BCRYPT_ALG_HANDLE, PUCHAR, ULONG, PUCHAR, ULONG,
+                                                 ULONGLONG, PUCHAR, ULONG, ULONG);
 static NTSTATUS (WINAPI *pBCryptGenRandom)(BCRYPT_ALG_HANDLE, PUCHAR, ULONG, ULONG);
 static NTSTATUS (WINAPI *pBCryptGetProperty)(BCRYPT_HANDLE, LPCWSTR, PUCHAR, ULONG, ULONG *, ULONG);
 static NTSTATUS (WINAPI *pBCryptSetProperty)(BCRYPT_HANDLE, LPCWSTR, PUCHAR, ULONG, ULONG);
@@ -402,6 +404,81 @@ static void test_BcryptHash(void)
     ok(ret == STATUS_SUCCESS, "got %08x\n", ret);
 }
 
+/* Test vectors from RFC 6070 */
+static UCHAR password[] = "password";
+static UCHAR salt[] = "salt";
+static UCHAR long_password[] =
+    "passwordPASSWORDpassword";
+static UCHAR long_salt[] =
+    "saltSALTsaltSALTsaltSALTsaltSALTsalt";
+static UCHAR password_NUL[] = "pass\0word";
+static UCHAR salt_NUL[] = "sa\0lt";
+
+static UCHAR dk1[] =
+    "0c60c80f961f0e71f3a9b524af6012062fe037a6";
+static UCHAR dk2[] =
+    "ea6c014dc72d6f8ccd1ed92ace1d41f0d8de8957";
+static UCHAR dk3[] =
+    "4b007901b765489abead49d926f721d065a429c1";
+static UCHAR dk4[] =
+    "eefe3d61cd4da4e4e9945b3d6ba2158c2634e984";
+static UCHAR dk5[] =
+    "3d2eec4fe41c849b80c8d83662c0e44a8b291a964cf2f07038";
+static UCHAR dk6[] =
+    "56fa6aa75548099dcc37d7f03425e0c3";
+
+static const struct {
+    ULONG password_length;
+    ULONG salt_length;
+    ULONGLONG iterations;
+    ULONG dklen;
+    UCHAR *password;
+    UCHAR *salt;
+    const UCHAR *dk;
+} rfc6070[] = {
+    {  8,  4,        1, 20, password,      salt,      dk1 },
+    {  8,  4,        2, 20, password,      salt,      dk2 },
+    {  8,  4,     4096, 20, password,      salt,      dk3 },
+    {  8,  4, 16777216, 20, password,      salt,      dk4 },
+    { 24, 36,     4096, 25, long_password, long_salt, dk5 },
+    {  9,  5,     4096, 16, password_NUL,  salt_NUL,  dk6 }
+};
+
+static void test_BcryptDeriveKeyPBKDF2(void)
+{
+    BCRYPT_ALG_HANDLE alg;
+    UCHAR dk[25];
+    char str[51];
+    NTSTATUS ret;
+    int i;
+
+    alg = NULL;
+    ret = pBCryptOpenAlgorithmProvider(&alg, BCRYPT_SHA1_ALGORITHM, MS_PRIMITIVE_PROVIDER,
+                                       BCRYPT_ALG_HANDLE_HMAC_FLAG);
+    ok(ret == STATUS_SUCCESS, "got %08x\n", ret);
+    ok(alg != NULL, "alg not set\n");
+
+    test_hash_length(alg, 20);
+    test_alg_name(alg, "SHA1");
+
+    for (i = 0; i < ARRAY_SIZE(rfc6070); i++)
+    {
+        memset(dk, 0, sizeof(dk));
+        ret = pBCryptDeriveKeyPBKDF2(alg,
+                                     rfc6070[i].password, rfc6070[i].password_length,
+                                     rfc6070[i].salt, rfc6070[i].salt_length,
+                                     rfc6070[i].iterations,
+                                     dk, rfc6070[i].dklen,
+                                     0);
+        ok(ret == STATUS_SUCCESS, "got %08x\n", ret);
+        format_hash( dk, rfc6070[i].dklen, str );
+        ok(!memcmp(str, rfc6070[i].dk, rfc6070[i].dklen), "got %s\n", str);
+    }
+
+    ret = pBCryptCloseAlgorithmProvider(alg, 0);
+    ok(ret == STATUS_SUCCESS, "got %08x\n", ret);
+}
+
 static void test_rng(void)
 {
     BCRYPT_ALG_HANDLE alg;
@@ -1674,6 +1751,7 @@ START_TEST(bcrypt)
     pBCryptDuplicateHash = (void *)GetProcAddress(module, "BCryptDuplicateHash");
     pBCryptFinishHash = (void *)GetProcAddress(module, "BCryptFinishHash");
     pBCryptDestroyHash = (void *)GetProcAddress(module, "BCryptDestroyHash");
+    pBCryptDeriveKeyPBKDF2 = (void *)GetProcAddress(module, "BCryptDeriveKeyPBKDF2");
     pBCryptGenRandom = (void *)GetProcAddress(module, "BCryptGenRandom");
     pBCryptGetProperty = (void *)GetProcAddress(module, "BCryptGetProperty");
     pBCryptSetProperty = (void *)GetProcAddress(module, "BCryptSetProperty");
@@ -1704,5 +1782,10 @@ START_TEST(bcrypt)
     else
         win_skip("BCryptHash is not available\n");
 
+    if (pBCryptDeriveKeyPBKDF2) /* >= Win 7 */
+        test_BcryptDeriveKeyPBKDF2();
+    else
+        win_skip("BCryptDeriveKeyPBKDF2 is not available\n");
+
     FreeLibrary(module);
 }
diff --git a/dlls/d3d10/Makefile.in b/dlls/d3d10/Makefile.in
index 0c7c63b..a7c67a2 100644
--- a/dlls/d3d10/Makefile.in
+++ b/dlls/d3d10/Makefile.in
@@ -9,8 +9,8 @@ C_SRCS = \
 	effect.c \
 	reflection.c \
 	shader.c \
-	stateblock.c \
-	utils.c
+  stateblock.c \
+  utils.c
 
 LEX_SRCS = \
 	hlsl.l
diff --git a/dlls/d3d10/utils.c b/dlls/d3d10/utils.c
deleted file mode 100644
index 60e07b2..0000000
--- a/dlls/d3d10/utils.c
+++ /dev/null
@@ -1,234 +0,0 @@
-/*
- * Copyright 2008-2009 Henri Verbeet for CodeWeavers
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2.1 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
- *
- */
-
-#include "config.h"
-#include "wine/port.h"
-
-#include "d3d10_private.h"
-
-WINE_DEFAULT_DEBUG_CHANNEL(d3d10);
-
-#define WINE_D3D10_TO_STR(x) case x: return #x
-
-const char *debug_d3d10_driver_type(D3D10_DRIVER_TYPE driver_type)
-{
-    switch(driver_type)
-    {
-        WINE_D3D10_TO_STR(D3D10_DRIVER_TYPE_HARDWARE);
-        WINE_D3D10_TO_STR(D3D10_DRIVER_TYPE_REFERENCE);
-        WINE_D3D10_TO_STR(D3D10_DRIVER_TYPE_NULL);
-        WINE_D3D10_TO_STR(D3D10_DRIVER_TYPE_SOFTWARE);
-        WINE_D3D10_TO_STR(D3D10_DRIVER_TYPE_WARP);
-        default:
-            FIXME("Unrecognized D3D10_DRIVER_TYPE %#x\n", driver_type);
-            return "unrecognized";
-    }
-}
-
-const char *debug_d3d10_shader_variable_class(D3D10_SHADER_VARIABLE_CLASS c)
-{
-    switch (c)
-    {
-        WINE_D3D10_TO_STR(D3D10_SVC_SCALAR);
-        WINE_D3D10_TO_STR(D3D10_SVC_VECTOR);
-        WINE_D3D10_TO_STR(D3D10_SVC_MATRIX_ROWS);
-        WINE_D3D10_TO_STR(D3D10_SVC_MATRIX_COLUMNS);
-        WINE_D3D10_TO_STR(D3D10_SVC_OBJECT);
-        WINE_D3D10_TO_STR(D3D10_SVC_STRUCT);
-        default:
-            FIXME("Unrecognized D3D10_SHADER_VARIABLE_CLASS %#x.\n", c);
-            return "unrecognized";
-    }
-}
-
-const char *debug_d3d10_shader_variable_type(D3D10_SHADER_VARIABLE_TYPE t)
-{
-    switch (t)
-    {
-        WINE_D3D10_TO_STR(D3D10_SVT_VOID);
-        WINE_D3D10_TO_STR(D3D10_SVT_BOOL);
-        WINE_D3D10_TO_STR(D3D10_SVT_INT);
-        WINE_D3D10_TO_STR(D3D10_SVT_FLOAT);
-        WINE_D3D10_TO_STR(D3D10_SVT_STRING);
-        WINE_D3D10_TO_STR(D3D10_SVT_TEXTURE);
-        WINE_D3D10_TO_STR(D3D10_SVT_TEXTURE1D);
-        WINE_D3D10_TO_STR(D3D10_SVT_TEXTURE2D);
-        WINE_D3D10_TO_STR(D3D10_SVT_TEXTURE3D);
-        WINE_D3D10_TO_STR(D3D10_SVT_TEXTURECUBE);
-        WINE_D3D10_TO_STR(D3D10_SVT_SAMPLER);
-        WINE_D3D10_TO_STR(D3D10_SVT_PIXELSHADER);
-        WINE_D3D10_TO_STR(D3D10_SVT_VERTEXSHADER);
-        WINE_D3D10_TO_STR(D3D10_SVT_UINT);
-        WINE_D3D10_TO_STR(D3D10_SVT_UINT8);
-        WINE_D3D10_TO_STR(D3D10_SVT_GEOMETRYSHADER);
-        WINE_D3D10_TO_STR(D3D10_SVT_RASTERIZER);
-        WINE_D3D10_TO_STR(D3D10_SVT_DEPTHSTENCIL);
-        WINE_D3D10_TO_STR(D3D10_SVT_BLEND);
-        WINE_D3D10_TO_STR(D3D10_SVT_BUFFER);
-        WINE_D3D10_TO_STR(D3D10_SVT_CBUFFER);
-        WINE_D3D10_TO_STR(D3D10_SVT_TBUFFER);
-        WINE_D3D10_TO_STR(D3D10_SVT_TEXTURE1DARRAY);
-        WINE_D3D10_TO_STR(D3D10_SVT_TEXTURE2DARRAY);
-        WINE_D3D10_TO_STR(D3D10_SVT_RENDERTARGETVIEW);
-        WINE_D3D10_TO_STR(D3D10_SVT_DEPTHSTENCILVIEW);
-        WINE_D3D10_TO_STR(D3D10_SVT_TEXTURE2DMS);
-        WINE_D3D10_TO_STR(D3D10_SVT_TEXTURE2DMSARRAY);
-        WINE_D3D10_TO_STR(D3D10_SVT_TEXTURECUBEARRAY);
-        default:
-            FIXME("Unrecognized D3D10_SHADER_VARIABLE_TYPE %#x.\n", t);
-            return "unrecognized";
-    }
-}
-
-const char *debug_d3d10_device_state_types(D3D10_DEVICE_STATE_TYPES t)
-{
-    switch (t)
-    {
-        WINE_D3D10_TO_STR(D3D10_DST_SO_BUFFERS);
-        WINE_D3D10_TO_STR(D3D10_DST_OM_RENDER_TARGETS);
-        WINE_D3D10_TO_STR(D3D10_DST_DEPTH_STENCIL_STATE);
-        WINE_D3D10_TO_STR(D3D10_DST_BLEND_STATE);
-        WINE_D3D10_TO_STR(D3D10_DST_VS);
-        WINE_D3D10_TO_STR(D3D10_DST_VS_SAMPLERS);
-        WINE_D3D10_TO_STR(D3D10_DST_VS_SHADER_RESOURCES);
-        WINE_D3D10_TO_STR(D3D10_DST_VS_CONSTANT_BUFFERS);
-        WINE_D3D10_TO_STR(D3D10_DST_GS);
-        WINE_D3D10_TO_STR(D3D10_DST_GS_SAMPLERS);
-        WINE_D3D10_TO_STR(D3D10_DST_GS_SHADER_RESOURCES);
-        WINE_D3D10_TO_STR(D3D10_DST_GS_CONSTANT_BUFFERS);
-        WINE_D3D10_TO_STR(D3D10_DST_PS);
-        WINE_D3D10_TO_STR(D3D10_DST_PS_SAMPLERS);
-        WINE_D3D10_TO_STR(D3D10_DST_PS_SHADER_RESOURCES);
-        WINE_D3D10_TO_STR(D3D10_DST_PS_CONSTANT_BUFFERS);
-        WINE_D3D10_TO_STR(D3D10_DST_IA_VERTEX_BUFFERS);
-        WINE_D3D10_TO_STR(D3D10_DST_IA_INDEX_BUFFER);
-        WINE_D3D10_TO_STR(D3D10_DST_IA_INPUT_LAYOUT);
-        WINE_D3D10_TO_STR(D3D10_DST_IA_PRIMITIVE_TOPOLOGY);
-        WINE_D3D10_TO_STR(D3D10_DST_RS_VIEWPORTS);
-        WINE_D3D10_TO_STR(D3D10_DST_RS_SCISSOR_RECTS);
-        WINE_D3D10_TO_STR(D3D10_DST_RS_RASTERIZER_STATE);
-        WINE_D3D10_TO_STR(D3D10_DST_PREDICATION);
-        default:
-            FIXME("Unrecognized D3D10_DEVICE_STATE_TYPES %#x.\n", t);
-            return "unrecognized";
-    }
-}
-
-#undef WINE_D3D10_TO_STR
-
-static void skip_dword_unknown(const char *location, const char **ptr, unsigned int count)
-{
-    unsigned int i;
-    DWORD d;
-
-    FIXME("Skipping %u unknown DWORDs (%s):\n", count, location);
-    for (i = 0; i < count; ++i)
-    {
-        read_dword(ptr, &d);
-        FIXME("\t0x%08x\n", d);
-    }
-}
-
-void write_dword_unknown(char **ptr, DWORD d)
-{
-    FIXME("Writing unknown DWORD 0x%08x\n", d);
-    write_dword(ptr, d);
-}
-
-HRESULT parse_dxbc(const char *data, SIZE_T data_size,
-        HRESULT (*chunk_handler)(const char *data, DWORD data_size, DWORD tag, void *ctx), void *ctx)
-{
-    const char *ptr = data;
-    HRESULT hr = S_OK;
-    DWORD chunk_count;
-    DWORD total_size;
-    unsigned int i;
-    DWORD version;
-    DWORD tag;
-
-    if (!data)
-    {
-        WARN("No data supplied.\n");
-        return E_FAIL;
-    }
-
-    read_dword(&ptr, &tag);
-    TRACE("tag: %s.\n", debugstr_an((const char *)&tag, 4));
-
-    if (tag != TAG_DXBC)
-    {
-        WARN("Wrong tag.\n");
-        return E_FAIL;
-    }
-
-    /* checksum? */
-    skip_dword_unknown("DXBC header", &ptr, 4);
-
-    read_dword(&ptr, &version);
-    TRACE("version: %#x.\n", version);
-    if (version != 0x00000001)
-    {
-        WARN("Got unexpected DXBC version %#x.\n", version);
-        return E_FAIL;
-    }
-
-    read_dword(&ptr, &total_size);
-    TRACE("total size: %#x\n", total_size);
-
-    if (data_size != total_size)
-    {
-        WARN("Wrong size supplied.\n");
-        return E_FAIL;
-    }
-
-    read_dword(&ptr, &chunk_count);
-    TRACE("chunk count: %#x\n", chunk_count);
-
-    for (i = 0; i < chunk_count; ++i)
-    {
-        DWORD chunk_tag, chunk_size;
-        const char *chunk_ptr;
-        DWORD chunk_offset;
-
-        read_dword(&ptr, &chunk_offset);
-        TRACE("chunk %u at offset %#x\n", i, chunk_offset);
-
-        if (chunk_offset >= data_size || !require_space(chunk_offset, 2, sizeof(DWORD), data_size))
-        {
-            WARN("Invalid chunk offset %#x (data size %#lx).\n", chunk_offset, data_size);
-            return E_FAIL;
-        }
-
-        chunk_ptr = data + chunk_offset;
-
-        read_dword(&chunk_ptr, &chunk_tag);
-        read_dword(&chunk_ptr, &chunk_size);
-
-        if (!require_space(chunk_ptr - data, 1, chunk_size, data_size))
-        {
-            WARN("Invalid chunk size %#x (data size %#lx, chunk offset %#x).\n", chunk_size, data_size, chunk_offset);
-            return E_FAIL;
-        }
-
-        hr = chunk_handler(chunk_ptr, chunk_size, chunk_tag, ctx);
-        if (FAILED(hr)) break;
-    }
-
-    return hr;
-}
diff --git a/dlls/d3d11/device.c b/dlls/d3d11/device.c
index 0b0afc8..a2210fc 100644
--- a/dlls/d3d11/device.c
+++ b/dlls/d3d11/device.c
@@ -2823,9 +2823,9 @@ static HRESULT STDMETHODCALLTYPE d3d11_device_CreateBuffer(ID3D11Device2 *iface,
     struct d3d_device *device = impl_from_ID3D11Device2(iface);
     struct d3d_buffer *object;
     HRESULT hr;
-  if (!query) {
-    ERR("no query\n");
-    return;
+  if (!device) {
+    ERR("no device\n");
+    return E_INVALIDARG;
   }
 
     TRACE("iface %p, desc %p, data %p, buffer %p.\n", iface, desc, data, buffer);
@@ -2844,9 +2844,9 @@ static HRESULT STDMETHODCALLTYPE d3d11_device_CreateTexture1D(ID3D11Device2 *ifa
     struct d3d_device *device = impl_from_ID3D11Device2(iface);
     struct d3d_texture1d *object;
     HRESULT hr;
-  if (!query) {
-    ERR("no query\n");
-    return;
+  if (!device) {
+    ERR("no device\n");
+    return E_INVALIDARG;
   }
 
     TRACE("iface %p, desc %p, data %p, texture %p.\n", iface, desc, data, texture);
@@ -3307,7 +3307,7 @@ static HRESULT STDMETHODCALLTYPE d3d11_device_CheckFormatSupport(ID3D11Device2 *
     unsigned int i;
   if (!device) {
     ERR("no device\n");
-    return;
+    return E_INVALIDARG;
   }
 
     static const struct
diff --git a/dlls/ncrypt/ncrypt.spec b/dlls/ncrypt/ncrypt.spec
index e7b12e0..adc0999 100644
--- a/dlls/ncrypt/ncrypt.spec
+++ b/dlls/ncrypt/ncrypt.spec
@@ -9,7 +9,7 @@
 @ stub BCryptDeleteContext
 @ stub BCryptDeriveKey
 @ stub BCryptDeriveKeyCapi
-@ stub BCryptDeriveKeyPBKDF2
+@ stdcall BCryptDeriveKeyPBKDF2(ptr ptr long ptr long int64 ptr long long) bcrypt.BCryptDeriveKeyPBKDF2
 @ stdcall BCryptDestroyHash(ptr) bcrypt.BCryptDestroyHash
 @ stdcall BCryptDestroyKey(ptr) bcrypt.BCryptDestroyKey
 @ stub BCryptDestroySecret
diff --git a/fonts/marlett.ttf b/fonts/marlett.ttf
old mode 100644
new mode 100755
index b3122c5..0db6b02
Binary files a/fonts/marlett.ttf and b/fonts/marlett.ttf differ
diff --git a/fonts/symbol.ttf b/fonts/symbol.ttf
old mode 100644
new mode 100755
index 1fd5b4e..fd1c033
Binary files a/fonts/symbol.ttf and b/fonts/symbol.ttf differ
diff --git a/fonts/tahoma.ttf b/fonts/tahoma.ttf
old mode 100644
new mode 100755
index 8bee8ad..b5e50a8
Binary files a/fonts/tahoma.ttf and b/fonts/tahoma.ttf differ
diff --git a/fonts/tahomabd.ttf b/fonts/tahomabd.ttf
old mode 100644
new mode 100755
index c01f9e1..96e449f
Binary files a/fonts/tahomabd.ttf and b/fonts/tahomabd.ttf differ
diff --git a/fonts/wingding.ttf b/fonts/wingding.ttf
old mode 100644
new mode 100755
index c8ab8e1..e8c4b95
Binary files a/fonts/wingding.ttf and b/fonts/wingding.ttf differ
diff --git a/include/bcrypt.h b/include/bcrypt.h
index df54f62..d3e4b99 100644
--- a/include/bcrypt.h
+++ b/include/bcrypt.h
@@ -217,6 +217,7 @@ typedef PVOID BCRYPT_HASH_HANDLE;
 NTSTATUS WINAPI BCryptCloseAlgorithmProvider(BCRYPT_ALG_HANDLE, ULONG);
 NTSTATUS WINAPI BCryptCreateHash(BCRYPT_ALG_HANDLE, BCRYPT_HASH_HANDLE *, PUCHAR, ULONG, PUCHAR, ULONG, ULONG);
 NTSTATUS WINAPI BCryptDecrypt(BCRYPT_KEY_HANDLE, PUCHAR, ULONG, VOID *, PUCHAR, ULONG, PUCHAR, ULONG, ULONG *, ULONG);
+NTSTATUS WINAPI BCryptDeriveKeyPBKDF2(BCRYPT_ALG_HANDLE, PUCHAR, ULONG, PUCHAR, ULONG, ULONGLONG, PUCHAR, ULONG, ULONG);
 NTSTATUS WINAPI BCryptDestroyHash(BCRYPT_HASH_HANDLE);
 NTSTATUS WINAPI BCryptDestroyKey(BCRYPT_KEY_HANDLE);
 NTSTATUS WINAPI BCryptEncrypt(BCRYPT_KEY_HANDLE, PUCHAR, ULONG, VOID *, PUCHAR, ULONG, PUCHAR, ULONG, ULONG *, ULONG);
