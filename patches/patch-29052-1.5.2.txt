diff -ur wine-1.5.2-pp/dlls/ddraw/ddraw_private.h wine-1.5.2/dlls/ddraw/ddraw_private.h
--- wine-1.5.2-pp/dlls/ddraw/ddraw_private.h	2012-05-02 22:08:33.963470253 -0500
+++ wine-1.5.2/dlls/ddraw/ddraw_private.h	2012-05-02 22:16:08.847236858 -0500
@@ -296,6 +296,7 @@
 
     /* Light state */
     DWORD material;
+    DWORD dummy_rs_lighting;
 
     /* Rendering functions to wrap D3D(1-3) to D3D7 */
     D3DPRIMITIVETYPE primitive_type;
@@ -408,6 +409,7 @@
 
     D3DLIGHT2 light;
     D3DLIGHT7 light7;
+    BOOL active;
 
     DWORD dwLightIndex;
 
diff -ur wine-1.5.2-pp/dlls/ddraw/device.c wine-1.5.2/dlls/ddraw/device.c
--- wine-1.5.2-pp/dlls/ddraw/device.c	2012-05-02 22:08:33.963470253 -0500
+++ wine-1.5.2/dlls/ddraw/device.c	2012-05-02 23:02:43.303254136 -0500
@@ -2161,6 +2161,20 @@
     return d3d_device3_Index(&device->IDirect3DDevice3_iface, index);
 }
 
+static DWORD handle_old_drawprimitive_flags(struct d3d_device *This, DWORD flags, DWORD fvf)
+{
+    IDirect3DDevice7_SetRenderState(&This->IDirect3DDevice7_iface, WINED3D_RS_CLIPPING,
+            !(flags & D3DDP_DONOTCLIP));
+
+    IDirect3DDevice7_SetRenderState(&This->IDirect3DDevice7_iface, WINED3D_RS_LIGHTING,
+            !(flags & D3DDP_DONOTLIGHT) && (fvf & D3DFVF_NORMAL) && This->material);
+
+    IDirect3DDevice7_SetRenderState(&This->IDirect3DDevice7_iface, WINED3D_RS_EXTENTS,
+            !(flags & D3DDP_DONOTUPDATEEXTENTS));
+
+    return flags & ~(D3DDP_DONOTCLIP | D3DDP_DONOTLIGHT | D3DDP_DONOTUPDATEEXTENTS);
+}
+
 /*****************************************************************************
  * IDirect3DDevice3::End
  *
@@ -2185,6 +2199,8 @@
 
     TRACE("iface %p, flags %#x.\n", iface, flags);
 
+    device->render_flags = handle_old_drawprimitive_flags(device, device->render_flags, device->vertex_type);
+
     return IDirect3DDevice7_DrawPrimitive(&device->IDirect3DDevice7_iface, device->primitive_type,
             device->vertex_type, device->vertex_buffer, device->nb_vertices, device->render_flags);
 }
@@ -2380,6 +2396,10 @@
 
     switch (state)
     {
+        case D3DRENDERSTATE_LIGHTING:
+            *value = device->dummy_rs_lighting;
+            return D3D_OK;
+
         case D3DRENDERSTATE_TEXTUREHANDLE:
         {
             /* This state is wrapped to SetTexture in SetRenderState, so
@@ -2699,6 +2719,11 @@
 
     switch (state)
     {
+        case D3DRENDERSTATE_LIGHTING:
+            device->dummy_rs_lighting = value;
+            hr = D3D_OK;
+            break;
+
         case D3DRENDERSTATE_TEXTUREHANDLE:
         {
             struct ddraw_surface *surf;
@@ -2886,16 +2911,20 @@
     wined3d_mutex_lock();
     if (state == D3DLIGHTSTATE_MATERIAL)
     {
-        struct d3d_material *m = ddraw_get_object(&device->handle_table, value - 1, DDRAW_HANDLE_MATERIAL);
-        if (!m)
+        if (value)
         {
-            WARN("Invalid material handle.\n");
-            wined3d_mutex_unlock();
-            return DDERR_INVALIDPARAMS;
+            struct d3d_material *m = ddraw_get_object(&device->handle_table, value - 1, DDRAW_HANDLE_MATERIAL);
+            if (!m)
+            {
+                WARN("Invalid material handle.\n");
+                wined3d_mutex_unlock();
+                return DDERR_INVALIDPARAMS;
+            }
+            TRACE(" activating material %p.\n", m);
+            material_activate(m);
         }
-
-        TRACE(" activating material %p.\n", m);
-        material_activate(m);
+        else
+            TRACE(" NULL material, lighting will be disabled.\n");
 
         device->material = value;
     }
@@ -3473,6 +3502,8 @@
     TRACE("iface %p, primitive_type %#x, fvf %#x, vertices %p, vertex_count %u, flags %#x.\n",
             iface, primitive_type, fvf, vertices, vertex_count, flags);
 
+    flags = handle_old_drawprimitive_flags(device, flags, fvf);
+
     return IDirect3DDevice7_DrawPrimitive(&device->IDirect3DDevice7_iface,
             primitive_type, fvf, vertices, vertex_count, flags);
 }
@@ -3497,6 +3528,8 @@
             return DDERR_INVALIDPARAMS;  /* Should never happen */
     }
 
+    flags = handle_old_drawprimitive_flags(device, flags, fvf);
+
     return IDirect3DDevice7_DrawPrimitive(&device->IDirect3DDevice7_iface,
             primitive_type, fvf, vertices, vertex_count, flags);
 }
@@ -3587,6 +3620,8 @@
             "indices %p, index_count %u, flags %#x.\n",
             iface, primitive_type, fvf, vertices, vertex_count, indices, index_count, flags);
 
+    flags = handle_old_drawprimitive_flags(device, flags, fvf);
+
     return IDirect3DDevice7_DrawIndexedPrimitive(&device->IDirect3DDevice7_iface,
             primitive_type, fvf, vertices, vertex_count, indices, index_count, flags);
 }
@@ -3612,6 +3647,8 @@
             return DDERR_INVALIDPARAMS;  /* Should never happen */
     }
 
+    flags = handle_old_drawprimitive_flags(device, flags, fvf);
+
     return IDirect3DDevice7_DrawIndexedPrimitive(&device->IDirect3DDevice7_iface,
             primitive_type, fvf, vertices, vertex_count, indices, index_count, flags);
 }
@@ -3832,6 +3869,8 @@
     TRACE("iface %p, primitive_type %#x, FVF %#x, strided_data %p, vertex_count %u, flags %#x.\n",
             iface, PrimitiveType, VertexType, D3DDrawPrimStrideData, VertexCount, Flags);
 
+    Flags = handle_old_drawprimitive_flags(device, Flags, VertexType);
+
     return IDirect3DDevice7_DrawPrimitiveStrided(&device->IDirect3DDevice7_iface,
             PrimitiveType, VertexType, D3DDrawPrimStrideData, VertexCount, Flags);
 }
@@ -3969,6 +4008,8 @@
     TRACE("iface %p, primitive_type %#x, FVF %#x, strided_data %p, vertex_count %u, indices %p, index_count %u, flags %#x.\n",
             iface, PrimitiveType, VertexType, D3DDrawPrimStrideData, VertexCount, Indices, IndexCount, Flags);
 
+    Flags = handle_old_drawprimitive_flags(device, Flags, VertexType);
+
     return IDirect3DDevice7_DrawIndexedPrimitiveStrided(&device->IDirect3DDevice7_iface,
             PrimitiveType, VertexType, D3DDrawPrimStrideData, VertexCount, Indices, IndexCount, Flags);
 }
@@ -4065,6 +4106,8 @@
     TRACE("iface %p, primitive_type %#x, vb %p, start_vertex %u, vertex_count %u, flags %#x.\n",
             iface, PrimitiveType, D3DVertexBuf, StartVertex, NumVertices, Flags);
 
+    Flags = handle_old_drawprimitive_flags(device, Flags, vb->fvf);
+
     return IDirect3DDevice7_DrawPrimitiveVB(&device->IDirect3DDevice7_iface,
             PrimitiveType, &vb->IDirect3DVertexBuffer7_iface, StartVertex, NumVertices, Flags);
 }
@@ -4213,6 +4256,8 @@
     TRACE("iface %p, primitive_type %#x, vb %p, indices %p, index_count %u, flags %#x.\n",
             iface, PrimitiveType, D3DVertexBuf, Indices, IndexCount, Flags);
 
+    Flags = handle_old_drawprimitive_flags(device, Flags, vb->fvf);
+
     return IDirect3DDevice7_DrawIndexedPrimitiveVB(&device->IDirect3DDevice7_iface, PrimitiveType,
             &vb->IDirect3DVertexBuffer7_iface, 0, IndexCount, Indices, IndexCount, Flags);
 }
@@ -6605,6 +6650,8 @@
     device->legacy_projection = ident;
     device->legacy_clipspace = ident;
 
+    device->dummy_rs_lighting = 0xffffffff;
+
     /* Create an index buffer, it's needed for indexed drawing */
     hr = wined3d_buffer_create_ib(ddraw->wined3d_device, 0x40000 /* Length. Don't know how long it should be */,
             WINED3DUSAGE_DYNAMIC /* Usage */, WINED3D_POOL_DEFAULT, NULL,
diff -ur wine-1.5.2-pp/dlls/ddraw/executebuffer.c wine-1.5.2/dlls/ddraw/executebuffer.c
--- wine-1.5.2-pp/dlls/ddraw/executebuffer.c	2012-05-02 22:08:33.963470253 -0500
+++ wine-1.5.2/dlls/ddraw/executebuffer.c	2012-05-02 23:05:29.839075282 -0500
@@ -216,13 +216,8 @@
 			ERR("Unexpected Light State Type %d\n", ci->u1.dlstLightStateType);
                     else if (ci->u1.dlstLightStateType == D3DLIGHTSTATE_MATERIAL /* 1 */)
                     {
-                        struct d3d_material *m;
-
-                        m = ddraw_get_object(&device->handle_table, ci->u2.dwArg[0] - 1, DDRAW_HANDLE_MATERIAL);
-                        if (!m)
-                            ERR("Invalid material handle %#x.\n", ci->u2.dwArg[0]);
-                        else
-                            material_activate(m);
+                        IDirect3DDevice2_SetLightState(&device->IDirect3DDevice2_iface,
+                                ci->u1.drstRenderStateType, ci->u2.dwArg[0]);
                     }
                     else if (ci->u1.dlstLightStateType == D3DLIGHTSTATE_COLORMODEL /* 3 */)
                     {
diff -ur wine-1.5.2-pp/dlls/ddraw/light.c wine-1.5.2/dlls/ddraw/light.c
--- wine-1.5.2-pp/dlls/ddraw/light.c	2012-05-02 22:08:33.963470253 -0500
+++ wine-1.5.2/dlls/ddraw/light.c	2012-05-02 22:53:27.645051855 -0500
@@ -60,10 +60,10 @@
     device = light->active_viewport->active_device;
 
     light_update(light);
-    if (!(light->light.dwFlags & D3DLIGHT_ACTIVE))
+    if (!light->active && (light->light.dwFlags & D3DLIGHT_ACTIVE))
     {
         IDirect3DDevice7_LightEnable(&device->IDirect3DDevice7_iface, light->dwLightIndex, TRUE);
-        light->light.dwFlags |= D3DLIGHT_ACTIVE;
+        light->active = TRUE;
     }
 }
 
@@ -84,10 +84,10 @@
     device = light->active_viewport->active_device;
 
     /* If was not active, activate it */
-    if (light->light.dwFlags & D3DLIGHT_ACTIVE)
+    if (light->active)
     {
         IDirect3DDevice7_LightEnable(&device->IDirect3DDevice7_iface, light->dwLightIndex, FALSE);
-        light->light.dwFlags &= ~D3DLIGHT_ACTIVE;
+        light->active = FALSE;
     }
 }
 
@@ -222,11 +222,15 @@
     light7->dvAttenuation0 = lpLight->dvAttenuation0;
     light7->dvAttenuation1 = lpLight->dvAttenuation1;
     light7->dvAttenuation2 = lpLight->dvAttenuation2;
+    if (lpLight->dwSize == sizeof(D3DLIGHT))
+        FIXME("D3DLIGHT attenuation values should be interpreted differently.\n");
     light7->dvTheta        = lpLight->dvTheta;
     light7->dvPhi          = lpLight->dvPhi;
 
     wined3d_mutex_lock();
     memcpy(&light->light, lpLight, lpLight->dwSize);
+    if (lpLight->dwSize == sizeof(D3DLIGHT))
+        light->light.dwFlags |= D3DLIGHT_ACTIVE;
     if (light->light.dwFlags & D3DLIGHT_ACTIVE)
         light_update(light);
     wined3d_mutex_unlock();
