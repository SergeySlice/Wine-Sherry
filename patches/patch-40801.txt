diff --git a/dlls/wined3d/directx.c b/dlls/wined3d/directx.c
index 48feeef..516499a 100644
--- a/dlls/wined3d/directx.c
+++ b/dlls/wined3d/directx.c
@@ -5421,8 +5421,13 @@ HRESULT CDECL wined3d_get_device_caps(const struct wined3d *wined3d, UINT adapte
 
     caps->MaxUserClipPlanes                = vertex_caps.max_user_clip_planes;
     caps->MaxActiveLights                  = vertex_caps.max_active_lights;
-    caps->MaxVertexBlendMatrices           = vertex_caps.max_vertex_blend_matrices;
-    caps->MaxVertexBlendMatrixIndex        = vertex_caps.max_vertex_blend_matrix_index;
+    if (gl_info->supported[ARB_VERTEX_BLEND]) {
+        caps->MaxVertexBlendMatrices    = gl_info->limits.blends;
+        caps->MaxVertexBlendMatrixIndex = 0;
+    } else {
+        caps->MaxVertexBlendMatrices    = 4;
+        caps->MaxVertexBlendMatrixIndex = 255;
+    }
     caps->VertexProcessingCaps             = vertex_caps.vertex_processing_caps;
     caps->FVFCaps                          = vertex_caps.fvf_caps;
     caps->RasterCaps                      |= vertex_caps.raster_caps;
diff --git a/dlls/wined3d/drawprim.c b/dlls/wined3d/drawprim.c
index 2b58def..68c5292 100644
--- a/dlls/wined3d/drawprim.c
+++ b/dlls/wined3d/drawprim.c
@@ -35,6 +35,76 @@ WINE_DECLARE_DEBUG_CHANNEL(d3d_perf);
 #include <stdio.h>
 #include <math.h>
 
+/*
+ * Emit a vertex using swoftware vertex blending
+ */
+static void emitBlendedVertex(struct wined3d_device *device,
+                              const struct wined3d_gl_info *gl_info,
+                              const float *weights, int nweights, const BYTE *indices,
+                              const float *pos, const float *norm)
+{
+    const float *m;
+    float        vec[4];
+    float        mat[4*4];
+    float        last = 1.f;
+    int          i, j;
+
+    /* compute the weighted sum of the matrices */
+    m = &device->state.transforms[WINED3D_TS_WORLD_MATRIX((indices ? indices[0] : 0))]._11;
+    for (j = 0; j < 16; j++)
+        mat[j] = m[j] * weights[0];
+    last -= weights[0];
+
+    for (i = 1; i < nweights; i++) {
+        if (weights[i]) {
+            m = &device->state.transforms[WINED3D_TS_WORLD_MATRIX((indices ? indices[i] : i))]._11;
+            for (j = 0; j < 16; j++)
+                mat[j] += m[j] * weights[i];
+            last -= weights[i];
+        }
+    }
+
+    /* do the last */
+    if (last) {
+        m = &device->state.transforms[WINED3D_TS_WORLD_MATRIX((indices ? indices[i] : i))]._11;
+        for (j = 0; j < 16; j++)
+            mat[j] += m[j] * last;
+    }
+
+    if (norm) {
+        /* compute the resulting normal */
+        vec[0] = norm[0] * mat[0] + norm[1] * mat[4] + norm[2] * mat[8];
+        vec[1] = norm[0] * mat[1] + norm[1] * mat[5] + norm[2] * mat[9];
+        vec[2] = norm[0] * mat[2] + norm[1] * mat[6] + norm[2] * mat[10];
+        /* normalize */
+        vec[3] = vec[0]*vec[0] + vec[1]*vec[1] + vec[2]*vec[2];
+        if (vec[3]) {
+            vec[3] = 1.f / sqrtf(vec[3]);
+            vec[0] *= vec[3];
+            vec[1] *= vec[3];
+            vec[2] *= vec[3];
+        }
+
+        gl_info->gl_ops.gl.p_glNormal3fv(vec);
+    }
+
+    if (pos) {
+        /* compute the resulting position */
+        vec[0] = pos[0] * mat[0] + pos[1] * mat[4] + pos[2] * mat[8] + mat[12];
+        vec[1] = pos[0] * mat[1] + pos[1] * mat[5] + pos[2] * mat[9] + mat[13];
+        vec[2] = pos[0] * mat[2] + pos[1] * mat[6] + pos[2] * mat[10] + mat[14];
+        vec[3] = pos[0] * mat[3] + pos[1] * mat[7] + pos[2] * mat[11] + mat[15];
+        /* normalize */
+        if (vec[3]) {
+            vec[0] /= vec[3];
+            vec[1] /= vec[3];
+            vec[2] /= vec[3];
+        }
+
+        gl_info->gl_ops.gl.p_glVertex3fv(vec);
+    }
+}
+
 /* Context activation is done by the caller. */
 static void draw_primitive_arrays(struct wined3d_context *context, const struct wined3d_state *state,
         unsigned int count, const void *idx_data, unsigned int idx_size, unsigned int start_idx,
@@ -164,11 +234,12 @@ static unsigned int get_stride_idx(const void *idx_data, unsigned int idx_size,
 }
 
 /* Context activation is done by the caller. */
-static void draw_primitive_immediate_mode(struct wined3d_context *context, const struct wined3d_state *state,
+static void draw_primitive_immediate_mode(struct wined3d_device *device, struct wined3d_context *context, const struct wined3d_state *state,
         const struct wined3d_stream_info *si, unsigned int vertex_count, const void *idx_data,
         unsigned int idx_size, unsigned int start_idx, unsigned int instance_count)
 {
-    const BYTE *position = NULL, *normal = NULL, *diffuse = NULL, *specular = NULL;
+    const BYTE *position = NULL, *normal = NULL, *diffuse = NULL, *specular = NULL, *weights = NULL, *indices = NULL;
+    int nweights = 0;
     const struct wined3d_d3d_info *d3d_info = context->d3d_info;
     unsigned int coord_idx, stride_idx, texture_idx, vertex_idx;
     const struct wined3d_gl_info *gl_info = context->gl_info;
@@ -282,6 +353,31 @@ static void draw_primitive_immediate_mode(struct wined3d_context *context, const
         GL_EXTCALL(glSecondaryColor3fEXT)(0.0f, 0.0f, 0.0f);
     }
 
+    if (device->vertexBlendSW) {
+        if (!si->elements[WINED3D_FFP_BLENDWEIGHT].data.addr) {
+            WARN("vertex blending enabled but blendWeights.data=NULL\n");
+        } else if (si->elements[WINED3D_FFP_BLENDWEIGHT].format->gl_vtx_type != GL_FLOAT) {
+            FIXME("unsupported blend weights datatype (%d)\n", si->elements[WINED3D_FFP_BLENDWEIGHT].format->id);
+        } else if (position && si->elements[WINED3D_FFP_POSITION].format->emit_idx != WINED3D_FFP_EMIT_FLOAT3) {
+            FIXME("unsupported postion datatype (%d)\n", si->elements[WINED3D_FFP_POSITION].format->id);
+        } else if (normal && si->elements[WINED3D_FFP_NORMAL].format->emit_idx != WINED3D_FFP_EMIT_FLOAT3) {
+            FIXME("unsupported normal datatype (%d)\n", si->elements[WINED3D_FFP_NORMAL].format->id);
+        } else {
+            element = &si->elements[WINED3D_FFP_BLENDWEIGHT];
+            weights = element->data.addr;
+            nweights = element->format->gl_vtx_format;
+        }
+
+        if (si->elements[WINED3D_FFP_BLENDINDICES].data.addr) {
+            if (si->elements[WINED3D_FFP_BLENDINDICES].format->emit_idx != WINED3D_FFP_EMIT_UBYTE4) {
+                FIXME("unsupported blend indices datatype (%d)\n", si->elements[WINED3D_FFP_BLENDINDICES].format->id);
+            } else {
+                element = &si->elements[WINED3D_FFP_BLENDINDICES];
+                indices = element->data.addr;
+            }
+        }
+    }
+
     texture_stages = d3d_info->limits.ffp_blend_stages;
     for (texture_idx = 0; texture_idx < texture_stages; ++texture_idx)
     {
@@ -329,10 +425,18 @@ static void draw_primitive_immediate_mode(struct wined3d_context *context, const
 
         stride_idx = get_stride_idx(idx_data, idx_size, state->base_vertex_index, start_idx, vertex_idx);
 
-        if (normal)
-        {
-            ptr = normal + stride_idx * si->elements[WINED3D_FFP_NORMAL].stride;
-            ops->normal[si->elements[WINED3D_FFP_NORMAL].format->emit_idx](ptr);
+        if (weights) {
+            emitBlendedVertex(device, gl_info,
+                              (const float*)(weights + stride_idx * si->elements[WINED3D_FFP_BLENDWEIGHT].stride), nweights,
+                              indices ? (indices + stride_idx * si->elements[WINED3D_FFP_BLENDINDICES].stride) : NULL,
+                              (const float*)(position ? (position + stride_idx * si->elements[WINED3D_FFP_POSITION].stride) : NULL),
+                              (const float*)(normal ? (normal + stride_idx * si->elements[WINED3D_FFP_NORMAL].stride) : NULL));
+        } else {
+            if (normal)
+            {
+                ptr = normal + stride_idx * si->elements[WINED3D_FFP_NORMAL].stride;
+                ops->normal[si->elements[WINED3D_FFP_NORMAL].format->emit_idx](ptr);
+            }
         }
 
         if (diffuse)
@@ -563,6 +667,17 @@ void draw_primitive(struct wined3d_device *device, const struct wined3d_state *s
                 WARN_(d3d_perf)("Using software emulation because manual fog coordinates are provided.\n");
             emulation = TRUE;
         }
+  	    else if (device->vertexBlendSW)
+		{
+            static BOOL warned;
+            if (!warned) {
+                FIXME("Using software emulation because vertex blending is enabled\n");
+                warned = TRUE;
+            } else {
+                TRACE("Using software emulation because vertex blending is enabled\n");
+            }
+            emulation = TRUE;
+        }
 
         if (emulation)
         {
@@ -573,7 +688,7 @@ void draw_primitive(struct wined3d_device *device, const struct wined3d_state *s
     }
 
     if (context->use_immediate_mode_draw || emulation)
-        draw_primitive_immediate_mode(context, state, stream_info, index_count,
+        draw_primitive_immediate_mode(device, context, state, stream_info, index_count,
                 idx_data, idx_size, start_idx, instance_count);
     else
         draw_primitive_arrays(context, state, index_count, idx_data,
diff --git a/dlls/wined3d/state.c b/dlls/wined3d/state.c
index bc55263..8a92c0a 100644
--- a/dlls/wined3d/state.c
+++ b/dlls/wined3d/state.c
@@ -3673,7 +3673,7 @@ void apply_pixelshader(struct wined3d_context *context, const struct wined3d_sta
              * bound. I don't have to do anything. */
         }
     }
-    else
+    else if (!context->swapchain->device->vertexBlendSW)
     {
         /* Disabled the pixel shader - color ops weren't applied while it was
          * enabled, so re-apply them. */
@@ -3796,11 +3796,31 @@ static void state_vertexblend_w(struct wined3d_context *context, const struct wi
     enum wined3d_vertex_blend_flags f = state->render_states[WINED3D_RS_VERTEXBLEND];
     static unsigned int once;
 
-    if (f == WINED3D_VBF_DISABLE)
-        return;
+    switch (f) {
+        case WINED3D_VBF_0WEIGHTS:
+        case WINED3D_VBF_1WEIGHTS:
+        case WINED3D_VBF_2WEIGHTS:
+        case WINED3D_VBF_3WEIGHTS:
+            if(!once) {
+                once = TRUE;
+                FIXME("Vertex blending enabled, but not supported by hardware. Using software emulation.\n");
+            }
+            if (!context->swapchain->device->vertexBlendSW) {
+                context->swapchain->device->vertexBlendSW = TRUE;
+                transform_world(context, state, state_id);
+            }
+            break;
 
-    if (!once++) FIXME("Vertex blend flags %#x not supported.\n", f);
-    else WARN("Vertex blend flags %#x not supported.\n", f);
+        case WINED3D_VBF_TWEENING:
+            WARN("Vertex blend flags %#x not supported.\n", f);
+            /* fall through */
+
+        default:
+            if (context->swapchain->device->vertexBlendSW) {
+                context->swapchain->device->vertexBlendSW = FALSE;
+                transform_world(context, state, state_id);
+            }
+    }
 }
 
 static void state_vertexblend(struct wined3d_context *context, const struct wined3d_state *state, DWORD state_id)
@@ -3906,6 +3926,9 @@ static void transform_view(struct wined3d_context *context, const struct wined3d
             if (!isStateDirty(context, STATE_TRANSFORM(WINED3D_TS_WORLD_MATRIX(k))))
                 transform_worldex(context, state, STATE_TRANSFORM(WINED3D_TS_WORLD_MATRIX(k)));
         }
+    } else {
+        gl_info->gl_ops.gl.p_glLoadMatrixf(&state->transforms[WINED3D_TS_VIEW]._11);
+        checkGLcall("glLoadMatrixf");
     }
 }
 
diff --git a/dlls/wined3d/vertexdeclaration.c b/dlls/wined3d/vertexdeclaration.c
index febd695..7341fc6 100644
--- a/dlls/wined3d/vertexdeclaration.c
+++ b/dlls/wined3d/vertexdeclaration.c
@@ -111,6 +111,15 @@ static BOOL declaration_element_valid_ffp(const struct wined3d_vertex_element *e
                     return FALSE;
             }
 
+        case WINED3D_DECL_USAGE_BLEND_INDICES:
+            switch(element->format)
+            {
+                case WINED3DFMT_R8G8B8A8_UINT:
+                    return TRUE;
+                default:
+                    return FALSE;
+            }
+
         case WINED3D_DECL_USAGE_NORMAL:
             switch(element->format)
             {
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 7207523..0a0cd5e 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -2310,12 +2310,13 @@ struct wined3d_device
     const struct blit_shader *blitter;
 
     BYTE vertexBlendUsed : 1;           /* To avoid needless setting of the blend matrices */
+    BYTE vertexBlendSW : 1;             /* Software fallback */
     BYTE bCursorVisible : 1;
     BYTE d3d_initialized : 1;
     BYTE inScene : 1;                   /* A flag to check for proper BeginScene / EndScene call pairs */
     BYTE softwareVertexProcessing : 1;  /* process vertex shaders using software or hardware */
     BYTE filter_messages : 1;
-    BYTE padding : 2;
+    BYTE padding : 1;
 
     unsigned char           surface_alignment; /* Line Alignment of surfaces                      */
