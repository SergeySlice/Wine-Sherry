diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index 5021d97..7c2101e 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -3546,6 +3546,15 @@ static HRESULT WINAPI IWineD3DDeviceImpl_SetVertexShaderConstantF(
     TRACE("(iface %p, srcData %p, start %d, count %d)\n",
             iface, srcData, start, count);
 
+    /* FIXME: when doing software vertex processing d3d9 allows up to
+     * 8192 shader constants. gfx card limits doesn't matter in this case.
+     * for now just make sure we're not accessing more constants than we have.*/
+    if(start + count > GL_LIMITS(vshader_constantsF)) {
+       WARN("app want more ConstantsF than available: %d (available: %d) - limited to %d\n",
+            start + count, GL_LIMITS(vshader_constantsF), GL_LIMITS(vshader_constantsF) - start);
+       count = GL_LIMITS(vshader_constantsF) - start;
+    }
+
     /* Specifically test start > limit to catch MAX_UINT overflows when adding start + count */
     if (srcData == NULL || start + count > GL_LIMITS(vshader_constantsF) || start > GL_LIMITS(vshader_constantsF))
         return WINED3DERR_INVALIDCALL;
@@ -7183,6 +7192,16 @@ static HRESULT WINAPI IWineD3DDeviceImpl_Reset(IWineD3DDevice* iface, WINED3DPRE
         ERR("What do do about a changed auto depth stencil parameter?\n");
     }
 
+    /* FIXME: is this correct or better creating a new one ?? */
+    if(pPresentationParameters->EnableAutoDepthStencil &&
+       This->stencilBufferTarget == NULL &&
+       This->auto_depth_stencil_buffer) {
+        WARN("set stencil buffer again to auto depth stencil buffer: %p\n",
+               This->auto_depth_stencil_buffer);
+        This->stencilBufferTarget = This->auto_depth_stencil_buffer;
+        IWineD3DSurface_AddRef(This->stencilBufferTarget);
+    }
+
     if (wined3d_settings.offscreen_rendering_mode == ORM_FBO) {
         reset_fbo_state((IWineD3DDevice *) This);
     }