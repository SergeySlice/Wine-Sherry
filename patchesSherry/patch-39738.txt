From 9be6778082a67155730cafbab7b608708c52e9ce Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Bernhard=20=C3=9Cbelacker?= <bernhardu@vr-web.de>
Date: Sat, 28 Nov 2015 14:15:21 +0100
Subject: kernel32: Stop all other threads of a crashing process.
Reply-To: wine-devel <wine-devel@winehq.org>

---
 dlls/kernel32/except.c | 35 ++++++++++++++++++++++++++++++++++-
 1 file changed, 34 insertions(+), 1 deletion(-)

diff --git a/dlls/kernel32/except.c b/dlls/kernel32/except.c
index 1a1521a..d6ced40 100644
--- a/dlls/kernel32/except.c
+++ b/dlls/kernel32/except.c
@@ -52,6 +52,7 @@
 #include "excpt.h"
 #include "wine/unicode.h"
 #include "wine/debug.h"
+#include "tlhelp32.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(seh);
 
@@ -337,6 +338,35 @@ EXIT:
     return ret;
 }
 
+static void suspend_other_threads(void)
+{
+    HANDLE snap = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);
+    if (snap != INVALID_HANDLE_VALUE)
+    {
+        THREADENTRY32   entry;
+        BOOL            ok;
+
+        entry.dwSize = sizeof(entry);
+        ok = Thread32First(snap, &entry);
+
+        while (ok)
+        {
+            if (entry.th32OwnerProcessID == GetCurrentProcessId())
+            {
+                if (entry.th32ThreadID != GetCurrentThreadId())
+                {
+                    HANDLE thread = OpenThread(THREAD_ALL_ACCESS, FALSE, entry.th32ThreadID);
+                    SuspendThread(thread);
+                    CloseHandle(thread);
+                }
+            }
+            ok = Thread32Next(snap, &entry);
+        }
+
+        CloseHandle(snap);
+    }
+}
+
 /******************************************************************
  *		start_debugger_atomic
  *
@@ -369,9 +399,12 @@ static BOOL start_debugger_atomic(PEXCEPTION_POINTERS epointers)
         if (InterlockedCompareExchangePointer( &hRunOnce, hEvent, 0 ) == 0)
 	{
 	    /* ok, our event has been set... we're the winning thread */
-	    BOOL	ret = start_debugger( epointers, hRunOnce );
+	    BOOL	ret;
 	    DWORD	tmp;
 
+	    suspend_other_threads();
+
+	    ret = start_debugger( epointers, hRunOnce );
 	    if (!ret)
 	    {
 		/* so that the other threads won't be stuck */
-- 
2.1.4
