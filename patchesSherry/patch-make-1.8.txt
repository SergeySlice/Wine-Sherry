diff --git a/dlls/secur32/schannel_macosx.c b/dlls/secur32/schannel_macosx.c
index cfd2371..c71189c 100644
--- a/dlls/secur32/schannel_macosx.c
+++ b/dlls/secur32/schannel_macosx.c
@@ -1016,6 +1016,7 @@ BOOL schan_imp_init(void)
     supported_protocols = SP_PROT_SSL2_CLIENT | SP_PROT_SSL3_CLIENT | SP_PROT_TLS1_0_CLIENT;
 
 #if MAC_OS_X_VERSION_MAX_ALLOWED >= 1080
+#ifdef   SSLGetProtocolVersionMax
     if(SSLGetProtocolVersionMax != NULL) {
         SSLProtocol max_protocol;
         SSLContextRef ctx;
@@ -1036,6 +1037,7 @@ BOOL schan_imp_init(void)
         }
     }
 #endif
+#endif
 
     return TRUE;
 }
diff --git a/dlls/winemac.drv/cocoa_app.m b/dlls/winemac.drv/cocoa_app.m
index 3a80f1d..a271029 100644
--- a/dlls/winemac.drv/cocoa_app.m
+++ b/dlls/winemac.drv/cocoa_app.m
@@ -729,11 +729,12 @@ - (NSArray*)modesMatchingMode:(CGDisplayModeRef)mode forDisplay:(CGDirectDisplay
         NSDictionary* options = nil;
 
 #if defined(MAC_OS_X_VERSION_10_8) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_8
+#ifdef  kCGDisplayShowDuplicateLowResolutionModes     
         if (&kCGDisplayShowDuplicateLowResolutionModes != NULL)
             options = [NSDictionary dictionaryWithObject:[NSNumber numberWithBool:TRUE]
                                                   forKey:(NSString*)kCGDisplayShowDuplicateLowResolutionModes];
 #endif
-
+#endif
         NSArray *modes = [(NSArray*)CGDisplayCopyAllDisplayModes(displayID, (CFDictionaryRef)options) autorelease];
         for (id candidateModeObject in modes)
         {
diff --git a/dlls/winemac.drv/display.c b/dlls/winemac.drv/display.c
index ad01191..474a243 100644
--- a/dlls/winemac.drv/display.c
+++ b/dlls/winemac.drv/display.c
@@ -553,6 +553,7 @@ static CFArrayRef copy_display_modes(CGDirectDisplayID display)
     CFArrayRef modes = NULL;
 
 #if defined(MAC_OS_X_VERSION_10_8) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_8
+#ifdef kCGDisplayShowDuplicateLowResolutionModes
     if (&kCGDisplayShowDuplicateLowResolutionModes != NULL &&
         CGDisplayModeGetPixelWidth != NULL && CGDisplayModeGetPixelHeight != NULL)
     {
@@ -661,6 +662,7 @@ static CFArrayRef copy_display_modes(CGDirectDisplayID display)
     }
     else
 #endif
+#endif
         modes = CGDisplayCopyAllDisplayModes(display, NULL);
 
     return modes;
diff --git a/tools/makedep.c b/tools/makedep.c
index 14a26ef..2765fe4 100644
--- a/tools/makedep.c
+++ b/tools/makedep.c
@@ -2105,8 +2105,9 @@ static struct strarray output_sources( const struct makefile *make, struct strar
         {
             output( "%s.h: %s%s %s\n", obj_dir_path( make, obj ),
                     tools_dir_path( make, "make_xftmpl" ), tools_ext, source->filename );
-            output( "\t%s%s -H -o $@ %s\n",
+            output( "\t@%s%s -H -o $@ %s\n",
                     tools_dir_path( make, "make_xftmpl" ), tools_ext, source->filename );
+            output( "\t@echo [MAKE] $@\n");
             if (source->file->flags & FLAG_INSTALL)
             {
                 strarray_add( &install_rules[INSTALL_DEV], source->name );
@@ -2127,7 +2128,7 @@ static struct strarray output_sources( const struct makefile *make, struct strar
             strarray_add( &res_files, strmake( "%s.res", obj ));
             output( "%s.res: %s %s\n", obj_dir_path( make, obj ),
                     tools_path( make, "wrc" ), source->filename );
-            output( "\t%s -o $@", tools_path( make, "wrc" ) );
+            output( "\t@%s -o $@", tools_path( make, "wrc" ) );
             if (make->is_win16) output_filename( "-m16" );
             else output_filenames( target_flags );
             output_filename( "--nostdinc" );
@@ -2140,6 +2141,7 @@ static struct strarray output_sources( const struct makefile *make, struct strar
                 output_filename( strmake( "--po-dir=%s", top_obj_dir_path( make, "po" )));
                 output_filename( source->filename );
                 output( "\n" );
+                output( "\t@echo [WRC] $@\n" );
                 output( "%s.res:", obj_dir_path( make, obj ));
                 output_filenames( mo_files );
                 output( "\n" );
@@ -2149,6 +2151,7 @@ static struct strarray output_sources( const struct makefile *make, struct strar
             {
                 output_filename( source->filename );
                 output( "\n" );
+                output( "\t@echo [WRC] $@\n" );
             }
             output( "%s.res:", obj_dir_path( make, obj ));
             output_filenames( dependencies );
@@ -2174,6 +2177,7 @@ static struct strarray output_sources( const struct makefile *make, struct strar
             output( "%s.res:", obj_dir_path( make, obj ));
             output_filenames( dependencies );
             output( "\n" );
+       //     output( "\t@echo [WMC] $@\n" );
         }
         else if (!strcmp( ext, "idl" ))  /* IDL file */
         {
@@ -2206,7 +2210,7 @@ static struct strarray output_sources( const struct makefile *make, struct strar
             if (!targets.count) continue;
             output_filenames_obj_dir( make, targets );
             output( ": %s\n", tools_path( make, "widl" ));
-            output( "\t%s -o $@", tools_path( make, "widl" ) );
+            output( "\t@%s -o $@", tools_path( make, "widl" ) );
             output_filenames( target_flags );
             output_filenames( includes );
             output_filenames( make->define_args );
@@ -2214,6 +2218,7 @@ static struct strarray output_sources( const struct makefile *make, struct strar
             output_filenames( get_expanded_make_var_array( make, "EXTRAIDLFLAGS" ));
             output_filename( source->filename );
             output( "\n" );
+            output( "\t@echo [WIDL] $@\n" );
             output_filenames_obj_dir( make, targets );
             output( ": %s", source->filename );
             output_filenames( dependencies );
@@ -2246,7 +2251,8 @@ static struct strarray output_sources( const struct makefile *make, struct strar
             strarray_add( &in_files, xstrdup(obj) );
             strarray_add( &all_targets, xstrdup(obj) );
             output( "%s: %s\n", obj_dir_path( make, obj ), source->filename );
-            output( "\t$(SED_CMD) %s >$@ || (rm -f $@ && false)\n", source->filename );
+            output( "\t@$(SED_CMD) %s >$@ || (rm -f $@ && false)\n", source->filename );
+            output( "\t@echo [SED] $@\n" );
             output( "%s:", obj_dir_path( make, obj ));
             output_filenames( dependencies );
             output( "\n" );
@@ -2259,8 +2265,9 @@ static struct strarray output_sources( const struct makefile *make, struct strar
             if (fontforge && !make->src_dir)
             {
                 output( "%s: %s\n", ttf_file, source->filename );
-                output( "\t%s -script %s %s $@\n",
+                output( "\t@%s -script %s %s $@\n",
                         fontforge, top_dir_path( make, "fonts/genttf.ff" ), source->filename );
+                output( "\t@echo [TTF] %s\n", source->filename );
                 if (!(source->file->flags & FLAG_SFD_FONTS)) output( "all: %s\n", ttf_file );
             }
             if (source->file->flags & FLAG_INSTALL)
@@ -2280,7 +2287,8 @@ static struct strarray output_sources( const struct makefile *make, struct strar
                     strarray_add( &all_targets, xstrdup( font ));
                     output( "%s: %s %s\n", obj_dir_path( make, font ),
                             tools_path( make, "sfnt2fon" ), ttf_file );
-                    output( "\t%s -o $@ %s %s\n", tools_path( make, "sfnt2fon" ), ttf_file, args );
+                    output( "\t@%s -o $@ %s %s\n", tools_path( make, "sfnt2fon" ), ttf_file, args );
+                    output( "\t@echo [SFNT] %s\n", ttf_file );
                     strarray_add( &install_rules[INSTALL_LIB], xstrdup(font) );
                     strarray_add( &install_rules[INSTALL_LIB], strmake( "d$(fontdir)/%s", font ));
                 }
@@ -2329,7 +2337,7 @@ static struct strarray output_sources( const struct makefile *make, struct strar
             if (source->file->flags & FLAG_C_IMPLIB) strarray_add( &implib_objs, strmake( "%s.o", obj ));
             strarray_add( &object_files, strmake( "%s.o", obj ));
             output( "%s.o: %s\n", obj_dir_path( make, obj ), source->filename );
-            output( "\t$(CC) -c -o $@ %s", source->filename );
+            output( "\t@$(CC) -c -o $@ %s", source->filename );
             output_filenames( includes );
             output_filenames( make->define_args );
             output_filenames( extradefs );
@@ -2342,11 +2350,12 @@ static struct strarray output_sources( const struct makefile *make, struct strar
             output_filenames( cpp_flags );
             output_filename( "$(CFLAGS)" );
             output( "\n" );
+            output( "\t@echo [CC] %s\n", source->filename);
             if (crosstarget && need_cross)
             {
                 strarray_add( &crossobj_files, strmake( "%s.cross.o", obj ));
                 output( "%s.cross.o: %s\n", obj_dir_path( make, obj ), source->filename );
-                output( "\t$(CROSSCC) -c -o $@ %s", source->filename );
+                output( "\t@$(CROSSCC) -c -o $@ %s", source->filename );
                 output_filenames( includes );
                 output_filenames( make->define_args );
                 output_filenames( extradefs );
@@ -2354,14 +2363,16 @@ static struct strarray output_sources( const struct makefile *make, struct strar
                 output_filenames( cpp_flags );
                 output_filename( "$(CFLAGS)" );
                 output( "\n" );
+              output( "\t@echo [CROSSCC] %s\n", source->filename);
             }
             if (make->testdll && !strcmp( ext, "c" ) && !(source->file->flags & FLAG_GENERATED))
             {
                 strarray_add( &ok_files, strmake( "%s.ok", obj ));
                 output( "%s.ok:\n", obj_dir_path( make, obj ));
-                output( "\t%s $(RUNTESTFLAGS) -T %s -M %s -p %s%s %s && touch $@\n",
+                output( "\t@%s $(RUNTESTFLAGS) -T %s -M %s -p %s%s %s && touch $@\n",
                         top_dir_path( make, "tools/runtest" ), top_obj_dir_path( make, "" ), make->testdll,
                         replace_extension( make->testdll, ".dll", "_test.exe" ), dll_ext, obj );
+                output( "\t@echo [RUN_TEST] $@\n");
             }
             if (!strcmp( ext, "c" ) && !(source->file->flags & FLAG_GENERATED))
                 strarray_add( &c2man_files, source->filename );
@@ -2381,7 +2392,7 @@ static struct strarray output_sources( const struct makefile *make, struct strar
         output( "%s: %s", obj_dir_path( make, "rsrc.pot" ), tools_path( make, "wrc" ) );
         output_filenames( po_files );
         output( "\n" );
-        output( "\t%s -O pot -o $@", tools_path( make, "wrc" ));
+        output( "\t@%s -O pot -o $@", tools_path( make, "wrc" ));
         if (make->is_win16) output_filename( "-m16" );
         else output_filenames( target_flags );
         output_filename( "--nostdinc" );
@@ -2389,6 +2400,7 @@ static struct strarray output_sources( const struct makefile *make, struct strar
         output_filenames( make->define_args );
         output_filenames( po_files );
         output( "\n" );
+        output( "\t@echo [WRC] $@\n" );
         strarray_add( &clean_files, "rsrc.pot" );
     }
 
@@ -2397,9 +2409,10 @@ static struct strarray output_sources( const struct makefile *make, struct strar
         output( "%s: %s", obj_dir_path( make, "msg.pot" ), tools_path( make, "wmc" ));
         output_filenames( mc_files );
         output( "\n" );
-        output( "\t%s -O pot -o $@", tools_path( make, "wmc" ));
+        output( "\t@%s -O pot -o $@", tools_path( make, "wmc" ));
         output_filenames( mc_files );
         output( "\n" );
+        output( "\t@echo [WMC] $@\n" );
         strarray_add( &clean_files, "msg.pot" );
     }
 
@@ -2407,9 +2420,10 @@ static struct strarray output_sources( const struct makefile *make, struct strar
     {
         output( "%s: %s %s\n", obj_dir_path( make, "dlldata.c" ),
                 tools_path( make, "widl" ), src_dir_path( make, "Makefile.in" ));
-        output( "\t%s --dlldata-only -o $@", tools_path( make, "widl" ));
+        output( "\t@%s --dlldata-only -o $@", tools_path( make, "widl" ));
         output_filenames( dlldata_files );
         output( "\n" );
+        output( "\t@echo [WIDL] $@\n" );
     }
 
     if (make->module && !make->staticlib)
@@ -2452,7 +2466,7 @@ static struct strarray output_sources( const struct makefile *make, struct strar
         output_filenames_obj_dir( make, object_files );
         output_filenames_obj_dir( make, res_files );
         output( "\n" );
-        output( "\t%s -o $@", tools_path( make, "winegcc" ));
+        output( "\t@%s -o $@", tools_path( make, "winegcc" ));
         output_filename( strmake( "-B%s", tools_dir_path( make, "winebuild" )));
         if (tools_dir) output_filename( strmake( "--sysroot=%s", top_obj_dir_path( make, "" )));
         output_filenames( target_flags );
@@ -2468,6 +2482,7 @@ static struct strarray output_sources( const struct makefile *make, struct strar
         output_filenames( all_libs );
         output_filename( "$(LDFLAGS)" );
         output( "\n" );
+        output( "\t@echo [WINEGCC] $@\n" );
 
         if (spec_file && make->importlib)
         {
@@ -2476,10 +2491,11 @@ static struct strarray output_sources( const struct makefile *make, struct strar
             {
                 strarray_add( &clean_files, strmake( "lib%s.def", make->importlib ));
                 output( "%s.def: %s %s\n", importlib_path, tools_path( make, "winebuild" ), spec_file );
-                output( "\t%s -w --def -o $@ --export %s", tools_path( make, "winebuild" ), spec_file );
+                output( "\t@%s -w --def -o $@ --export %s", tools_path( make, "winebuild" ), spec_file );
                 output_filenames( target_flags );
                 if (make->is_win16) output_filename( "-m16" );
                 output( "\n" );
+                output( "\t@echo [WINEBUILD] $@\n");
                 add_install_rule( make, install_rules, make->importlib,
                                   strmake( "lib%s.def", make->importlib ),
                                   strmake( "d$(dlldir)/lib%s.def", make->importlib ));
@@ -2505,10 +2521,11 @@ static struct strarray output_sources( const struct makefile *make, struct strar
                 output( "%s.a: %s %s", importlib_path, tools_path( make, "winebuild" ), spec_file );
                 output_filenames_obj_dir( make, implib_objs );
                 output( "\n" );
-                output( "\t%s -w --implib -o $@ --export %s", tools_path( make, "winebuild" ), spec_file );
+                output( "\t@%s -w --implib -o $@ --export %s", tools_path( make, "winebuild" ), spec_file );
                 output_filenames( target_flags );
                 output_filenames_obj_dir( make, implib_objs );
                 output( "\n" );
+                output( "\t@echo [WINEBUILD] $@\n");
                 add_install_rule( make, install_rules, make->importlib,
                                   strmake( "lib%s.a", make->importlib ),
                                   strmake( "d$(dlldir)/lib%s.a", make->importlib ));
@@ -2520,10 +2537,11 @@ static struct strarray output_sources( const struct makefile *make, struct strar
                 output( "%s.cross.a: %s %s", importlib_path, tools_path( make, "winebuild" ), spec_file );
                 output_filenames_obj_dir( make, cross_files );
                 output( "\n" );
-                output( "\t%s -b %s -w --implib -o $@ --export %s",
+                output( "\t@%s -b %s -w --implib -o $@ --export %s",
                         tools_path( make, "winebuild" ), crosstarget, spec_file );
                 output_filenames_obj_dir( make, cross_files );
                 output( "\n" );
+                output( "\t@echo [WINEBUILD] $@\n" );
             }
         }
 
@@ -2532,37 +2550,41 @@ static struct strarray output_sources( const struct makefile *make, struct strar
             if (c2man_files.count)
             {
                 output( "manpages::\n" );
-                output( "\t%s -w %s", top_dir_path( make, "tools/c2man.pl" ), spec_file );
+                output( "\t@%s -w %s", top_dir_path( make, "tools/c2man.pl" ), spec_file );
                 output_filename( strmake( "-R%s", top_dir_path( make, "" )));
                 output_filename( strmake( "-I%s", top_dir_path( make, "include" )));
                 output_filename( strmake( "-o %s/man%s",
                                           top_obj_dir_path( make, "documentation" ), man_ext ));
                 output_filenames( c2man_files );
                 output( "\n" );
+                output( "\t@echo [C2MAN] $@\n" );
                 output( "htmlpages::\n" );
-                output( "\t%s -Th -w %s", top_dir_path( make, "tools/c2man.pl" ), spec_file );
+                output( "\t@%s -Th -w %s", top_dir_path( make, "tools/c2man.pl" ), spec_file );
                 output_filename( strmake( "-R%s", top_dir_path( make, "" )));
                 output_filename( strmake( "-I%s", top_dir_path( make, "include" )));
                 output_filename( strmake( "-o %s",
                                           top_obj_dir_path( make, "documentation/html" )));
                 output_filenames( c2man_files );
                 output( "\n" );
+                output( "\t@echo [HTML] $@\n" );
                 output( "sgmlpages::\n" );
-                output( "\t%s -Ts -w %s", top_dir_path( make, "tools/c2man.pl" ), spec_file );
+                output( "\t@%s -Ts -w %s", top_dir_path( make, "tools/c2man.pl" ), spec_file );
                 output_filename( strmake( "-R%s", top_dir_path( make, "" )));
                 output_filename( strmake( "-I%s", top_dir_path( make, "include" )));
                 output_filename( strmake( "-o %s",
                                           top_obj_dir_path( make, "documentation/api-guide" )));
                 output_filenames( c2man_files );
                 output( "\n" );
+                output( "\t@echo [SGML] $@\n" );
                 output( "xmlpages::\n" );
-                output( "\t%s -Tx -w %s", top_dir_path( make, "tools/c2man.pl" ), spec_file );
+                output( "\t@%s -Tx -w %s", top_dir_path( make, "tools/c2man.pl" ), spec_file );
                 output_filename( strmake( "-R%s", top_dir_path( make, "" )));
                 output_filename( strmake( "-I%s", top_dir_path( make, "include" )));
                 output_filename( strmake( "-o %s",
                                           top_obj_dir_path( make, "documentation/api-guide-xml" )));
                 output_filenames( c2man_files );
                 output( "\n" );
+                output( "\t@echo [XML] $@\n" );
                 strarray_add( &phony_targets, "manpages" );
                 strarray_add( &phony_targets, "htmlpages" );
                 strarray_add( &phony_targets, "sgmlpages" );
@@ -2595,9 +2617,10 @@ static struct strarray output_sources( const struct makefile *make, struct strar
             output( "%s:", obj_dir_path( make, name ));
             output_filenames_obj_dir( make, crossobj_files );
             output( "\n\trm -f $@\n" );
-            output( "\t%s-ar $(ARFLAGS) $@", crosstarget );
+            output( "\t@%s-ar $(ARFLAGS) $@", crosstarget );
             output_filenames_obj_dir( make, crossobj_files );
             output( "\n\t%s-ranlib $@\n", crosstarget );
+            output( "\t@echo [RANLIB] $@\n");
         }
     }
 
@@ -2642,7 +2665,8 @@ static struct strarray output_sources( const struct makefile *make, struct strar
 
         if (!strncmp( def_file, "lib", 3 )) def_file += 3;
         output( "%s: %s\n", obj_dir_path( make, make->importlib ), src_dir_path( make, def_file ));
-        output( "\t%s -l $@ -d %s\n", dlltool, src_dir_path( make, def_file ));
+        output( "\t@%s -l $@ -d %s\n", dlltool, src_dir_path( make, def_file ));
+        output( "\t@echo [MAKELIB] $@\n");
         add_install_rule( make, install_rules, make->importlib, make->importlib,
                           strmake( "d$(libdir)/%s", make->importlib ));
         strarray_add( &all_targets, make->importlib );
@@ -2662,7 +2686,7 @@ static struct strarray output_sources( const struct makefile *make, struct strar
         strarray_add( &all_targets, strmake( "%s%s", testmodule, dll_ext ));
         strarray_add( &clean_files, strmake( "%s%s", stripped, dll_ext ));
         output( "%s%s:\n", obj_dir_path( make, testmodule ), dll_ext );
-        output( "\t%s -o $@", tools_path( make, "winegcc" ));
+        output( "\t@%s -o $@", tools_path( make, "winegcc" ));
         output_filename( strmake( "-B%s", tools_dir_path( make, "winebuild" )));
         if (tools_dir) output_filename( strmake( "--sysroot=%s", top_obj_dir_path( make, "" )));
         output_filenames( target_flags );
@@ -2673,8 +2697,9 @@ static struct strarray output_sources( const struct makefile *make, struct strar
         output_filenames( all_libs );
         output_filename( "$(LDFLAGS)" );
         output( "\n" );
+        output( "\t@echo [WINEGCC] $@\n" );
         output( "%s%s:\n", obj_dir_path( make, stripped ), dll_ext );
-        output( "\t%s -o $@", tools_path( make, "winegcc" ));
+        output( "\t@%s -o $@", tools_path( make, "winegcc" ));
         output_filename( strmake( "-B%s", tools_dir_path( make, "winebuild" )));
         if (tools_dir) output_filename( strmake( "--sysroot=%s", top_obj_dir_path( make, "" )));
         output_filenames( target_flags );
@@ -2686,6 +2711,7 @@ static struct strarray output_sources( const struct makefile *make, struct strar
         output_filenames( all_libs );
         output_filename( "$(LDFLAGS)" );
         output( "\n" );
+        output( "\t@echo [WINEGCC] $@\n" );
         output( "%s%s %s%s:", obj_dir_path( make, testmodule ), dll_ext,
                 obj_dir_path( make, stripped ), dll_ext );
         output_filenames_obj_dir( make, object_files );
@@ -2708,7 +2734,7 @@ static struct strarray output_sources( const struct makefile *make, struct strar
             output_filenames_obj_dir( make, crossobj_files );
             output_filenames_obj_dir( make, res_files );
             output( "\n" );
-            output( "\t%s -o $@ -b %s", tools_path( make, "winegcc" ), crosstarget );
+            output( "\t@%s -o $@ -b %s", tools_path( make, "winegcc" ), crosstarget );
             output_filename( strmake( "-B%s", tools_dir_path( make, "winebuild" )));
             if (tools_dir) output_filename( strmake( "--sysroot=%s", top_obj_dir_path( make, "" )));
             output_filename( "--lib-suffix=.cross.a" );
@@ -2717,6 +2743,7 @@ static struct strarray output_sources( const struct makefile *make, struct strar
             output_filenames( all_libs );
             output_filename( "$(LDFLAGS)" );
             output( "\n" );
+            output( "\t@echo [WINEGCC] $@\n" );
             strarray_add( &phony_targets, obj_dir_path( make, "crosstest" ));
             if (make->obj_dir) output( "crosstest: %s\n", obj_dir_path( make, "crosstest" ));
         }
