commit a28a4b7ddd765ee6bd5211209e03df1d03513de7
Author: Sergey Isakov <isakov-sl@bk.ru>
Date:   Wed Feb 10 00:48:23 2016 +0300

    patch for 35718 by Ken Thomases, opengl32
    
    Signed-off-by: Sergey Isakov <isakov-sl@bk.ru>

diff --git a/dlls/opengl32/make_opengl b/dlls/opengl32/make_opengl
index 2b15f58..d9328d6 100755
--- a/dlls/opengl32/make_opengl
+++ b/dlls/opengl32/make_opengl
@@ -139,6 +139,8 @@ my %debug_conv =
      "HGLRC" => "%p",
      "HPBUFFERARB" => "%p",
      "HPBUFFEREXT" => "%p",
+     "HSURFACEWINE" => "%p",
+     "HWND" => "%p",
     );
 
 #
@@ -196,6 +198,7 @@ sub ConvertType($)
               "GLDEBUGPROCKHR" => "void *",
               "HPBUFFERARB" => "struct wgl_pbuffer *",
               "HPBUFFEREXT" => "struct wgl_pbuffer *",
+              "HSURFACEWINE" => "struct wgl_surface *",
         );
 
     foreach my $org (reverse sort keys %hash) {
@@ -573,6 +576,12 @@ my %ext_functions  =
     "glDeleteObjectBufferATI" => [ "void", [ [ "GLuint", "buffer" ] ], [ "GL_ATI_vertex_array_object" ] ],
     "wglSetPixelFormatWINE" => [ "BOOL", [ [ "HDC", "hdc" ],
                                            [ "int", "format" ] ], [ "WGL_WINE_pixel_format_passthrough" ] ],
+    "wglCreateSurfaceWINE" => [ "HSURFACEWINE", [ [ "HDC", "hdc" ],
+                                                  [ "HWND", "proxy_window" ] ], [ "WGL_WINE_surface" ] ],
+    "wglDestroySurfaceWINE" => [ "BOOL", [ [ "HSURFACEWINE", "surface" ] ], [ "WGL_WINE_surface" ] ],
+    "wglGetSurfaceDCWINE" => [ "HDC", [ [ "HSURFACEWINE", "surface" ] ], [ "WGL_WINE_surface" ] ],
+    "wglReleaseSurfaceDCWINE" => [ "BOOL", [ [ "HSURFACEWINE", "surface" ],
+                                             [ "HDC", "hdc" ] ], [ "WGL_WINE_surface" ] ],
    );
 
 
@@ -611,6 +620,7 @@ my %supported_wgl_extensions =
     "WGL_EXT_swap_control" => 1,
     "WGL_NV_vertex_array_range" => 1,
     "WGL_WINE_pixel_format_passthrough" => 1,
+    "WGL_WINE_surface" => 1,
    );
 
 my %enums = ();
@@ -761,7 +771,8 @@ print HEADER "#endif\n\n";
 printf HEADER "#define WINE_WGL_DRIVER_VERSION %u\n\n", $wgl_version + 1;
 
 print HEADER "struct wgl_context;\n";
-print HEADER "struct wgl_pbuffer;\n\n";
+print HEADER "struct wgl_pbuffer;\n";
+print HEADER "struct wgl_surface;\n\n";
 
 print HEADER "struct opengl_funcs\n{\n";
 print HEADER "    struct\n    {\n";
@@ -796,7 +807,7 @@ foreach (sort keys %norm_functions)
 print HEADER "\n\n";
 
 print HEADER "extern struct opengl_funcs * CDECL __wine_get_wgl_driver( HDC hdc, UINT version );\n";
-print HEADER "extern BOOL CDECL __wine_set_pixel_format( HWND hwnd, int format );\n\n";
+print HEADER "extern BOOL CDECL __wine_track_gl_surfaces( HWND hwnd, int change );\n\n";
 print HEADER "#endif /* __WINE_WGL_DRIVER_H */\n";
 close HEADER;
 
diff --git a/dlls/opengl32/opengl_ext.c b/dlls/opengl32/opengl_ext.c
index e1aeec5..6b68d63 100644
--- a/dlls/opengl32/opengl_ext.c
+++ b/dlls/opengl32/opengl_ext.c
@@ -14,7 +14,7 @@
 
 WINE_DEFAULT_DEBUG_CHANNEL(opengl);
 
-const int extension_registry_size = 2533;
+const int extension_registry_size = 2537;
 
 static void WINAPI glAccumxOES( GLenum op, GLfixed value ) {
   const struct opengl_funcs *funcs = NtCurrentTeb()->glTable;
@@ -15084,7 +15084,7 @@ static void WINAPI glWriteMaskEXT( GLuint res, GLuint in, GLenum outX, GLenum ou
   funcs->ext.p_glWriteMaskEXT( res, in, outX, outY, outZ, outW );
 }
 
-const OpenGL_extension extension_registry[2533] = {
+const OpenGL_extension extension_registry[2537] = {
   { "glAccumxOES", "GL_OES_fixed_point", glAccumxOES },
   { "glActiveProgramEXT", "GL_EXT_separate_shader_objects", glActiveProgramEXT },
   { "glActiveShaderProgram", "GL_ARB_separate_shader_objects GL_VERSION_4_1", glActiveShaderProgram },
@@ -17602,7 +17602,9 @@ const OpenGL_extension extension_registry[2533] = {
   { "wglChoosePixelFormatARB", "WGL_ARB_pixel_format", wglChoosePixelFormatARB },
   { "wglCreateContextAttribsARB", "WGL_ARB_create_context", wglCreateContextAttribsARB },
   { "wglCreatePbufferARB", "WGL_ARB_pbuffer", wglCreatePbufferARB },
+  { "wglCreateSurfaceWINE", "WGL_WINE_surface", wglCreateSurfaceWINE },
   { "wglDestroyPbufferARB", "WGL_ARB_pbuffer", wglDestroyPbufferARB },
+  { "wglDestroySurfaceWINE", "WGL_WINE_surface", wglDestroySurfaceWINE },
   { "wglFreeMemoryNV", "WGL_NV_vertex_array_range", wglFreeMemoryNV },
   { "wglGetCurrentReadDCARB", "WGL_ARB_make_current_read", wglGetCurrentReadDCARB },
   { "wglGetExtensionsStringARB", "WGL_ARB_extensions_string", wglGetExtensionsStringARB },
@@ -17610,10 +17612,12 @@ const OpenGL_extension extension_registry[2533] = {
   { "wglGetPbufferDCARB", "WGL_ARB_pbuffer", wglGetPbufferDCARB },
   { "wglGetPixelFormatAttribfvARB", "WGL_ARB_pixel_format", wglGetPixelFormatAttribfvARB },
   { "wglGetPixelFormatAttribivARB", "WGL_ARB_pixel_format", wglGetPixelFormatAttribivARB },
+  { "wglGetSurfaceDCWINE", "WGL_WINE_surface", wglGetSurfaceDCWINE },
   { "wglGetSwapIntervalEXT", "WGL_EXT_swap_control", wglGetSwapIntervalEXT },
   { "wglMakeContextCurrentARB", "WGL_ARB_make_current_read", wglMakeContextCurrentARB },
   { "wglQueryPbufferARB", "WGL_ARB_pbuffer", wglQueryPbufferARB },
   { "wglReleasePbufferDCARB", "WGL_ARB_pbuffer", wglReleasePbufferDCARB },
+  { "wglReleaseSurfaceDCWINE", "WGL_WINE_surface", wglReleaseSurfaceDCWINE },
   { "wglReleaseTexImageARB", "WGL_ARB_render_texture", wglReleaseTexImageARB },
   { "wglSetPbufferAttribARB", "WGL_ARB_render_texture", wglSetPbufferAttribARB },
   { "wglSetPixelFormatWINE", "WGL_WINE_pixel_format_passthrough", wglSetPixelFormatWINE },
diff --git a/dlls/opengl32/opengl_ext.h b/dlls/opengl32/opengl_ext.h
index 2e49d4a..f16dd7f 100644
--- a/dlls/opengl32/opengl_ext.h
+++ b/dlls/opengl32/opengl_ext.h
@@ -33,4 +33,11 @@ extern const int extension_registry_size DECLSPEC_HIDDEN;
 
 extern BOOL WINAPI wglSetPixelFormatWINE( HDC hdc, int format ) DECLSPEC_HIDDEN;
 
+DECLARE_HANDLE(HSURFACEWINE);
+extern HSURFACEWINE WINAPI wglCreateSurfaceWINE( HDC hdc, HWND proxy_window );
+extern HDC WINAPI wglGetSurfaceDCWINE( HSURFACEWINE surface );
+extern BOOL WINAPI wglReleaseSurfaceDCWINE( HSURFACEWINE surface, HDC hdc );
+extern BOOL WINAPI wglDestroySurfaceWINE( HSURFACEWINE surface );
+
+
 #endif /* __DLLS_OPENGL32_OPENGL_EXT_H */
diff --git a/dlls/opengl32/opengl_norm.c b/dlls/opengl32/opengl_norm.c
index 09329ce..313be3a 100644
--- a/dlls/opengl32/opengl_norm.c
+++ b/dlls/opengl32/opengl_norm.c
@@ -5879,7 +5879,9 @@ static BOOL null_wglBindTexImageARB( struct wgl_pbuffer * hPbuffer, int iBuffer
 static BOOL null_wglChoosePixelFormatARB( HDC hdc, const int* piAttribIList, const FLOAT* pfAttribFList, UINT nMaxFormats, int* piFormats, UINT* nNumFormats ) { return 0; }
 static struct wgl_context * null_wglCreateContextAttribsARB( HDC hDC, struct wgl_context * hShareContext, const int* attribList ) { return 0; }
 static struct wgl_pbuffer * null_wglCreatePbufferARB( HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int* piAttribList ) { return 0; }
+static struct wgl_surface * null_wglCreateSurfaceWINE( HDC hdc, HWND proxy_window ) { return 0; }
 static BOOL null_wglDestroyPbufferARB( struct wgl_pbuffer * hPbuffer ) { return 0; }
+static BOOL null_wglDestroySurfaceWINE( struct wgl_surface * surface ) { return 0; }
 static void null_wglFreeMemoryNV( void* pointer ) { }
 static HDC null_wglGetCurrentReadDCARB( void ) { return 0; }
 static const char* null_wglGetExtensionsStringARB( HDC hdc ) { return 0; }
@@ -5887,10 +5889,12 @@ static const char* null_wglGetExtensionsStringEXT( void ) { return 0; }
 static HDC null_wglGetPbufferDCARB( struct wgl_pbuffer * hPbuffer ) { return 0; }
 static BOOL null_wglGetPixelFormatAttribfvARB( HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int* piAttributes, FLOAT* pfValues ) { return 0; }
 static BOOL null_wglGetPixelFormatAttribivARB( HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int* piAttributes, int* piValues ) { return 0; }
+static HDC null_wglGetSurfaceDCWINE( struct wgl_surface * surface ) { return 0; }
 static int null_wglGetSwapIntervalEXT( void ) { return 0; }
 static BOOL null_wglMakeContextCurrentARB( HDC hDrawDC, HDC hReadDC, struct wgl_context * hglrc ) { return 0; }
 static BOOL null_wglQueryPbufferARB( struct wgl_pbuffer * hPbuffer, int iAttribute, int* piValue ) { return 0; }
 static int null_wglReleasePbufferDCARB( struct wgl_pbuffer * hPbuffer, HDC hDC ) { return 0; }
+static BOOL null_wglReleaseSurfaceDCWINE( struct wgl_surface * surface, HDC hdc ) { return 0; }
 static BOOL null_wglReleaseTexImageARB( struct wgl_pbuffer * hPbuffer, int iBuffer ) { return 0; }
 static BOOL null_wglSetPbufferAttribARB( struct wgl_pbuffer * hPbuffer, const int* piAttribList ) { return 0; }
 static BOOL null_wglSetPixelFormatWINE( HDC hdc, int format ) { return 0; }
@@ -8766,7 +8770,9 @@ struct opengl_funcs null_opengl_funcs =
         null_wglChoosePixelFormatARB,
         null_wglCreateContextAttribsARB,
         null_wglCreatePbufferARB,
+        null_wglCreateSurfaceWINE,
         null_wglDestroyPbufferARB,
+        null_wglDestroySurfaceWINE,
         null_wglFreeMemoryNV,
         null_wglGetCurrentReadDCARB,
         null_wglGetExtensionsStringARB,
@@ -8774,10 +8780,12 @@ struct opengl_funcs null_opengl_funcs =
         null_wglGetPbufferDCARB,
         null_wglGetPixelFormatAttribfvARB,
         null_wglGetPixelFormatAttribivARB,
+        null_wglGetSurfaceDCWINE,
         null_wglGetSwapIntervalEXT,
         null_wglMakeContextCurrentARB,
         null_wglQueryPbufferARB,
         null_wglReleasePbufferDCARB,
+        null_wglReleaseSurfaceDCWINE,
         null_wglReleaseTexImageARB,
         null_wglSetPbufferAttribARB,
         null_wglSetPixelFormatWINE,
diff --git a/dlls/opengl32/wgl.c b/dlls/opengl32/wgl.c
index f3f78ef..3bee5ba 100644
--- a/dlls/opengl32/wgl.c
+++ b/dlls/opengl32/wgl.c
@@ -54,6 +54,7 @@ enum wgl_handle_type
     HANDLE_PBUFFER = 0 << 12,
     HANDLE_CONTEXT = 1 << 12,
     HANDLE_CONTEXT_V3 = 3 << 12,
+    HANDLE_SURFACE = 2 << 12,
     HANDLE_TYPE_MASK = 15 << 12
 };
 
@@ -75,6 +76,7 @@ struct wgl_handle
     {
         struct opengl_context *context;  /* for HANDLE_CONTEXT */
         struct wgl_pbuffer    *pbuffer;  /* for HANDLE_PBUFFER */
+        struct wgl_surface    *surface;  /* for HANDLE_SURFACE */
         struct wgl_handle     *next;     /* for free handles */
     } u;
 };
@@ -1213,6 +1215,71 @@ BOOL WINAPI wglSetPixelFormatWINE( HDC hdc, int format )
 }
 
 /***********************************************************************
+ *		wglCreateSurfaceWINE
+ *
+ * Provided by the WGL_WINE_surface extension.
+ */
+HSURFACEWINE WINAPI wglCreateSurfaceWINE( HDC hdc, HWND proxy_window )
+{
+    HSURFACEWINE ret = 0;
+    struct wgl_surface *surface;
+    struct opengl_funcs *funcs = get_dc_funcs( hdc );
+
+    if (!funcs || !funcs->ext.p_wglCreateSurfaceWINE) return 0;
+    if (!(surface = funcs->ext.p_wglCreateSurfaceWINE( hdc, proxy_window ))) return 0;
+    ret = alloc_handle( HANDLE_SURFACE, funcs, surface );
+    if (!ret) funcs->ext.p_wglDestroySurfaceWINE( surface );
+    return ret;
+}
+
+/***********************************************************************
+ *		wglGetSurfaceDCWINE
+ *
+ * Provided by the WGL_WINE_surface extension.
+ */
+HDC WINAPI wglGetSurfaceDCWINE( HSURFACEWINE surface )
+{
+    struct wgl_handle *ptr = get_handle_ptr( surface, HANDLE_SURFACE );
+    HDC ret;
+
+    if (!ptr) return 0;
+    ret = ptr->funcs->ext.p_wglGetSurfaceDCWINE( ptr->u.surface );
+    release_handle_ptr( ptr );
+    return ret;
+}
+
+/***********************************************************************
+ *		wglReleaseSurfaceDCWINE
+ *
+ * Provided by the WGL_WINE_surface extension.
+ */
+BOOL WINAPI wglReleaseSurfaceDCWINE( HSURFACEWINE surface, HDC hdc )
+{
+    struct wgl_handle *ptr = get_handle_ptr( surface, HANDLE_SURFACE );
+    BOOL ret;
+
+    if (!ptr) return FALSE;
+    ret = ptr->funcs->ext.p_wglReleaseSurfaceDCWINE( ptr->u.surface, hdc );
+    release_handle_ptr( ptr );
+    return ret;
+}
+
+/***********************************************************************
+ *		wglDestroySurfaceWINE
+ *
+ * Provided by the WGL_WINE_surface extension.
+ */
+BOOL WINAPI wglDestroySurfaceWINE( HSURFACEWINE surface )
+{
+    struct wgl_handle *ptr = get_handle_ptr( surface, HANDLE_SURFACE );
+
+    if (!ptr) return FALSE;
+    ptr->funcs->ext.p_wglDestroySurfaceWINE( ptr->u.surface );
+    free_handle_ptr( ptr );
+    return TRUE;
+}
+
+/***********************************************************************
  *		wglUseFontBitmaps_common
  */
 static BOOL wglUseFontBitmaps_common( HDC hdc, DWORD first, DWORD count, DWORD listBase, BOOL unicode )
