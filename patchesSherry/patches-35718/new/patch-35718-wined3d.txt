commit d619fb239f75410221ece05066194dab2cb770eb
Author: Sergey Isakov <isakov-sl@bk.ru>
Date:   Wed Feb 10 00:47:04 2016 +0300

    patch for 35718 by Ken Thomases, wined3d
    
    Signed-off-by: Sergey Isakov <isakov-sl@bk.ru>

diff --git a/dlls/wined3d/arb_program_shader.c b/dlls/wined3d/arb_program_shader.c
index 766652a..d858260 100644
--- a/dlls/wined3d/arb_program_shader.c
+++ b/dlls/wined3d/arb_program_shader.c
@@ -7955,7 +7955,7 @@ static void arbfp_blit_surface(struct wined3d_device *device, enum wined3d_blit_
     context_apply_blit_state(context, device);
 
     if (!wined3d_resource_is_offscreen(&dst_surface->container->resource))
-        surface_translate_drawable_coords(dst_surface, context->win_handle, &dst_rect);
+        surface_translate_drawable_coords(dst_surface, context, &dst_rect);
 
     if (op == WINED3D_BLIT_OP_COLOR_BLIT_ALPHATEST)
     {
diff --git a/dlls/wined3d/context.c b/dlls/wined3d/context.c
index 03fd548..8f08b21 100644
--- a/dlls/wined3d/context.c
+++ b/dlls/wined3d/context.c
@@ -949,24 +949,53 @@ static void context_restore_gl_context(const struct wined3d_gl_info *gl_info, HD
     }
 }
 
-static void context_update_window(struct wined3d_context *context)
+static void context_update_drawable(struct wined3d_context *context)
 {
-    if (context->win_handle == context->swapchain->win_handle)
+    const struct wined3d_gl_info *gl_info = context->gl_info;
+
+    if (context->win_handle == context->swapchain->win_handle
+            && context->surface == context->swapchain->surface)
         return;
 
-    TRACE("Updating context %p window from %p to %p.\n",
-            context, context->win_handle, context->swapchain->win_handle);
+    TRACE("Updating context %p window from %p to %p, surface from %p to %p.\n",
+            context, context->win_handle, context->swapchain->win_handle,
+            context->surface, context->swapchain->surface);
 
     if (context->hdc)
-        wined3d_release_dc(context->win_handle, context->hdc);
+    {
+        if (context->surface)
+        {
+            if (context->surface == context->swapchain->surface)
+            {
+                context->win_handle = context->swapchain->win_handle;
+                return;
+            }
+            else
+                GL_EXTCALL(wglReleaseSurfaceDCWINE(context->surface, context->hdc));
+        }
+        else
+            wined3d_release_dc(context->win_handle, context->hdc);
+    }
 
     context->win_handle = context->swapchain->win_handle;
+    context->surface = context->swapchain->surface;
+    context->hdc = NULL;
     context->hdc_is_private = FALSE;
     context->hdc_has_format = FALSE;
     context->needs_set = 1;
     context->valid = 1;
 
-    if (!(context->hdc = GetDC(context->win_handle)))
+    if (context->surface)
+    {
+        if ((context->hdc = GL_EXTCALL(wglGetSurfaceDCWINE(context->surface))))
+            context->hdc_is_private = TRUE;
+        else
+        {
+            WARN("Failed to get a device context for surface %p.\n", context->surface);
+            context->surface = NULL;
+        }
+    }
+    if (!context->hdc && !(context->hdc = GetDC(context->win_handle)))
     {
         ERR("Failed to get a device context for window %p.\n", context->win_handle);
         context->valid = 0;
@@ -1084,7 +1113,10 @@ static void context_destroy_gl_resources(struct wined3d_context *context)
         ERR("Failed to disable GL context.\n");
     }
 
-    wined3d_release_dc(context->win_handle, context->hdc);
+    if (context->surface)
+        GL_EXTCALL(wglReleaseSurfaceDCWINE(context->surface, context->hdc));
+    else
+        wined3d_release_dc(context->win_handle, context->hdc);
 
     if (!wglDeleteContext(context->glCtx))
     {
@@ -1464,10 +1496,10 @@ struct wined3d_context *context_create(struct wined3d_swapchain *swapchain,
     unsigned int s;
     int swap_interval;
     DWORD state;
-    HDC hdc = 0;
+    HDC hdc = NULL;
     BOOL hdc_is_private = FALSE;
 
-    TRACE("swapchain %p, target %p, window %p.\n", swapchain, target, swapchain->win_handle);
+    TRACE("swapchain %p, target %p, window %p, surface %p.\n", swapchain, target, swapchain->win_handle, swapchain->surface);
 
     ret = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(*ret));
     if (!ret)
@@ -1545,7 +1577,17 @@ struct wined3d_context *context_create(struct wined3d_swapchain *swapchain,
         }
     }
 
-    if (!(hdc = GetDC(swapchain->win_handle)))
+    if (swapchain->surface)
+    {
+        if ((hdc = GL_EXTCALL(wglGetSurfaceDCWINE(swapchain->surface))))
+        {
+            ret->surface = swapchain->surface;
+            hdc_is_private = TRUE;
+        }
+        else
+            WARN("Failed to get device context for surface %p\n", swapchain->surface);
+    }
+    if (!hdc && !(hdc = GetDC(swapchain->win_handle)))
     {
         WARN("Failed to retrieve device context, trying swapchain backup.\n");
 
@@ -1926,7 +1968,8 @@ static void context_get_rt_size(const struct wined3d_context *context, SIZE *siz
 {
     const struct wined3d_surface *rt = context->current_rt;
 
-    if (rt->container->swapchain && rt->container->swapchain->front_buffer == rt->container)
+    if (rt->container->swapchain && rt->container->swapchain->front_buffer == rt->container
+        && (!context->surface || context->swapchain->desc.windowed))
     {
         RECT window_size;
 
@@ -3407,7 +3450,7 @@ struct wined3d_context *context_acquire(const struct wined3d_device *device, str
     }
 
     context_enter(context);
-    context_update_window(context);
+    context_update_drawable(context);
     context_setup_target(context, target);
     if (!context->valid) return context;
 
diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index 82963ed..7519df5 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -831,30 +831,39 @@ void CDECL wined3d_device_setup_fullscreen_window(struct wined3d_device *device,
 {
     BOOL filter_messages;
     LONG style, exstyle;
+    UINT swp_flags;
 
     TRACE("Setting up window %p for fullscreen mode.\n", window);
 
-    if (device->style || device->exStyle)
+    if (!device->adapter->gl_info.supported[WGL_WINE_SURFACE])
     {
-        ERR("Changing the window style for window %p, but another style (%08x, %08x) is already stored.\n",
-                window, device->style, device->exStyle);
-    }
+        if (device->style || device->exStyle)
+        {
+            ERR("Changing the window style for window %p, but another style (%08x, %08x) is already stored.\n",
+                    window, device->style, device->exStyle);
+        }
 
-    device->style = GetWindowLongW(window, GWL_STYLE);
-    device->exStyle = GetWindowLongW(window, GWL_EXSTYLE);
+        device->style = GetWindowLongW(window, GWL_STYLE);
+        device->exStyle = GetWindowLongW(window, GWL_EXSTYLE);
 
-    style = fullscreen_style(device->style);
-    exstyle = fullscreen_exstyle(device->exStyle);
+        style = fullscreen_style(device->style);
+        exstyle = fullscreen_exstyle(device->exStyle);
 
-    TRACE("Old style was %08x, %08x, setting to %08x, %08x.\n",
-            device->style, device->exStyle, style, exstyle);
+        TRACE("Old style was %08x, %08x, setting to %08x, %08x.\n",
+                device->style, device->exStyle, style, exstyle);
+    }
 
     filter_messages = device->filter_messages;
     device->filter_messages = TRUE;
 
-    SetWindowLongW(window, GWL_STYLE, style);
-    SetWindowLongW(window, GWL_EXSTYLE, exstyle);
-    SetWindowPos(window, HWND_TOPMOST, 0, 0, w, h, SWP_FRAMECHANGED | SWP_SHOWWINDOW | SWP_NOACTIVATE);
+    swp_flags = 0;
+    if (!device->adapter->gl_info.supported[WGL_WINE_SURFACE])
+    {
+        SetWindowLongW(window, GWL_STYLE, style);
+        SetWindowLongW(window, GWL_EXSTYLE, exstyle);
+        swp_flags = SWP_FRAMECHANGED;
+    }
+    SetWindowPos(window, HWND_TOPMOST, 0, 0, w, h, swp_flags | SWP_SHOWWINDOW | SWP_NOACTIVATE);
 
     device->filter_messages = filter_messages;
 }
@@ -4785,7 +4794,12 @@ HRESULT CDECL wined3d_device_reset(struct wined3d_device *device,
             wined3d_device_restore_fullscreen_window(device, swapchain->device_window);
             wined3d_device_release_focus_window(device);
         }
-        swapchain->desc.windowed = swapchain_desc->windowed;
+
+        if (!swapchain_desc->windowed != !swapchain->desc.windowed)
+        {
+            swapchain->desc.windowed = swapchain_desc->windowed;
+            swapchain_update_surface(swapchain);
+        }
     }
     else if (!swapchain_desc->windowed)
     {
diff --git a/dlls/wined3d/directx.c b/dlls/wined3d/directx.c
index 6e37e4a..4098a1f 100644
--- a/dlls/wined3d/directx.c
+++ b/dlls/wined3d/directx.c
@@ -242,6 +242,7 @@ static const struct wined3d_extension_map wgl_extension_map[] =
     {"WGL_EXT_swap_control",                WGL_EXT_SWAP_CONTROL             },
     {"WGL_WINE_pixel_format_passthrough",   WGL_WINE_PIXEL_FORMAT_PASSTHROUGH},
     {"WGL_WINE_gpu_info",                   WGL_WINE_GPU_INFO                },
+    {"WGL_WINE_surface",                    WGL_WINE_SURFACE                 },
 };
 
 /**********************************************************
diff --git a/dlls/wined3d/surface.c b/dlls/wined3d/surface.c
index 135e438..24d0aa1 100644
--- a/dlls/wined3d/surface.c
+++ b/dlls/wined3d/surface.c
@@ -939,7 +939,7 @@ static void surface_blt_fbo(const struct wined3d_device *device,
     {
         TRACE("Source surface %p is onscreen.\n", src_surface);
         buffer = surface_get_gl_buffer(src_surface);
-        surface_translate_drawable_coords(src_surface, context->win_handle, &src_rect);
+        surface_translate_drawable_coords(src_surface, context, &src_rect);
     }
     else
     {
@@ -956,7 +956,7 @@ static void surface_blt_fbo(const struct wined3d_device *device,
     {
         TRACE("Destination surface %p is onscreen.\n", dst_surface);
         buffer = surface_get_gl_buffer(dst_surface);
-        surface_translate_drawable_coords(dst_surface, context->win_handle, &dst_rect);
+        surface_translate_drawable_coords(dst_surface, context, &dst_rect);
     }
     else
     {
@@ -3340,19 +3340,20 @@ static void fb_copy_to_texture_hwstretch(struct wined3d_surface *dst_surface, st
  * drawable is limited to the window's client area. The sysmem and texture
  * copies do have the full screen size. Note that GL has a bottom-left
  * origin, while D3D has a top-left origin. */
-void surface_translate_drawable_coords(const struct wined3d_surface *surface, HWND window, RECT *rect)
+void surface_translate_drawable_coords(const struct wined3d_surface *surface, const struct wined3d_context *context, RECT *rect)
 {
     UINT drawable_height;
 
-    if (surface->container->swapchain && surface->container == surface->container->swapchain->front_buffer)
+    if (surface->container->swapchain && surface->container == surface->container->swapchain->front_buffer
+        && (!context->surface || context->swapchain->desc.windowed))
     {
         POINT offset = {0, 0};
         RECT windowsize;
 
-        ScreenToClient(window, &offset);
+        ScreenToClient(context->win_handle, &offset);
         OffsetRect(rect, offset.x, offset.y);
 
-        GetClientRect(window, &windowsize);
+        GetClientRect(context->win_handle, &windowsize);
         drawable_height = windowsize.bottom - windowsize.top;
     }
     else
@@ -3397,7 +3398,7 @@ static void surface_blt_to_drawable(const struct wined3d_device *device,
     context_apply_blit_state(context, device);
 
     if (!wined3d_resource_is_offscreen(&dst_surface->container->resource))
-        surface_translate_drawable_coords(dst_surface, context->win_handle, &dst_rect);
+        surface_translate_drawable_coords(dst_surface, context, &dst_rect);
 
     device->blitter->set_shader(device->blit_priv, context, src_surface, NULL);
 
diff --git a/dlls/wined3d/swapchain.c b/dlls/wined3d/swapchain.c
index 6863879..6d5bce3 100644
--- a/dlls/wined3d/swapchain.c
+++ b/dlls/wined3d/swapchain.c
@@ -29,6 +29,7 @@ WINE_DECLARE_DEBUG_CHANNEL(fps);
 
 static void swapchain_cleanup(struct wined3d_swapchain *swapchain)
 {
+    const struct wined3d_gl_info *gl_info = &swapchain->device->adapter->gl_info;
     HRESULT hr;
     UINT i;
 
@@ -66,6 +67,9 @@ static void swapchain_cleanup(struct wined3d_swapchain *swapchain)
     }
     HeapFree(GetProcessHeap(), 0, swapchain->context);
 
+    if (swapchain->surface && !GL_EXTCALL(wglDestroySurfaceWINE(swapchain->surface)))
+        ERR("wglDestroySurfaceWINE failed to destroy surface %p\n", swapchain->surface);
+
     /* Restore the screen resolution if we rendered in fullscreen.
      * This will restore the screen resolution to what it was before creating
      * the swapchain. In case of d3d8 and d3d9 this will be the original
@@ -130,6 +134,9 @@ void CDECL wined3d_swapchain_set_window(struct wined3d_swapchain *swapchain, HWN
     TRACE("Setting swapchain %p window from %p to %p.\n",
             swapchain, swapchain->win_handle, window);
     swapchain->win_handle = window;
+
+    if (swapchain->desc.windowed)
+        swapchain_update_surface(swapchain);
 }
 
 HRESULT CDECL wined3d_swapchain_present(struct wined3d_swapchain *swapchain,
@@ -305,7 +312,6 @@ static void swapchain_blit(const struct wined3d_swapchain *swapchain,
     UINT src_h = src_rect->bottom - src_rect->top;
     GLenum gl_filter;
     const struct wined3d_gl_info *gl_info = context->gl_info;
-    RECT win_rect;
     UINT win_h;
 
     TRACE("swapchain %p, context %p, src_rect %s, dst_rect %s.\n",
@@ -316,8 +322,14 @@ static void swapchain_blit(const struct wined3d_swapchain *swapchain,
     else
         gl_filter = GL_LINEAR;
 
-    GetClientRect(swapchain->win_handle, &win_rect);
-    win_h = win_rect.bottom - win_rect.top;
+    if (context->surface && !swapchain->desc.windowed)
+        win_h = swapchain->front_buffer->resource.height;
+    else
+    {
+        RECT win_rect;
+        GetClientRect(swapchain->win_handle, &win_rect);
+        win_h = win_rect.bottom - win_rect.top;
+    }
 
     if (gl_info->fbo_ops.glBlitFramebuffer && is_identity_fixup(backbuffer->resource.format->color_fixup))
     {
@@ -519,6 +531,13 @@ static void swapchain_gl_present(struct wined3d_swapchain *swapchain, const RECT
 
     if (dst_rect_in)
         dst_rect = *dst_rect_in;
+    else if (context->surface && !swapchain->desc.windowed)
+    {
+        dst_rect.left = 0;
+        dst_rect.top = 0;
+        dst_rect.right = swapchain->front_buffer->resource.width;
+        dst_rect.bottom = swapchain->front_buffer->resource.height;
+    }
     else
         GetClientRect(swapchain->win_handle, &dst_rect);
 
@@ -741,7 +760,15 @@ static void swapchain_update_render_to_fbo(struct wined3d_swapchain *swapchain)
         return;
     }
 
-    GetClientRect(swapchain->win_handle, &client_rect);
+    if (swapchain->surface && !swapchain->desc.windowed)
+    {
+        client_rect.left = 0;
+        client_rect.top = 0;
+        client_rect.right = swapchain->front_buffer->resource.width;
+        client_rect.bottom = swapchain->front_buffer->resource.height;
+    }
+    else
+        GetClientRect(swapchain->win_handle, &client_rect);
 
     TRACE("Backbuffer %ux%u, window %ux%u.\n",
             swapchain->desc.backbuffer_width,
@@ -768,6 +795,7 @@ static HRESULT swapchain_init(struct wined3d_swapchain *swapchain, struct wined3
         struct wined3d_swapchain_desc *desc, void *parent, const struct wined3d_parent_ops *parent_ops)
 {
     const struct wined3d_adapter *adapter = device->adapter;
+    const struct wined3d_gl_info *gl_info = &adapter->gl_info;
     struct wined3d_resource_desc texture_desc;
     struct wined3d_surface *front_buffer;
     BOOL displaymode_set = FALSE;
@@ -835,6 +863,7 @@ static HRESULT swapchain_init(struct wined3d_swapchain *swapchain, struct wined3
     }
     swapchain->desc = *desc;
     swapchain_update_render_to_fbo(swapchain);
+    swapchain_update_surface(swapchain);
 
     TRACE("Creating front buffer.\n");
 
@@ -896,8 +925,6 @@ static HRESULT swapchain_init(struct wined3d_swapchain *swapchain, struct wined3
             WINED3DFMT_S1_UINT_D15_UNORM
         };
 
-        const struct wined3d_gl_info *gl_info = &adapter->gl_info;
-
         swapchain->context = HeapAlloc(GetProcessHeap(), 0, sizeof(*swapchain->context));
         if (!swapchain->context)
         {
@@ -1046,6 +1073,9 @@ err:
         wined3d_texture_decref(swapchain->front_buffer);
     }
 
+    if (swapchain->surface && !GL_EXTCALL(wglDestroySurfaceWINE(swapchain->surface)))
+        ERR("wglDestroySurfaceWINE failed to destroy surface %p\n", swapchain->surface);
+
     return hr;
 }
 
@@ -1171,6 +1201,33 @@ void swapchain_update_draw_bindings(struct wined3d_swapchain *swapchain)
     }
 }
 
+void swapchain_update_surface(struct wined3d_swapchain *swapchain)
+{
+    const struct wined3d_gl_info *gl_info = &swapchain->device->adapter->gl_info;
+    if (gl_info->supported[WGL_WINE_SURFACE])
+    {
+        HDC hdc;
+
+        if (swapchain->surface && !GL_EXTCALL(wglDestroySurfaceWINE(swapchain->surface)))
+            ERR("wglDestroySurfaceWINE failed to destroy surface %p\n", swapchain->surface);
+
+        if (swapchain->desc.windowed)
+            hdc = GetDC(swapchain->win_handle);
+        else
+            hdc = CreateDCW(swapchain->device->adapter->DeviceName, swapchain->device->adapter->DeviceName, NULL, NULL);
+
+        swapchain->surface = GL_EXTCALL(wglCreateSurfaceWINE(hdc, swapchain->win_handle));
+        if (!swapchain->surface)
+            WARN("wglCreateSurfaceWINE failed to create surface for window %p\n",
+                 swapchain->desc.windowed ? swapchain->win_handle : NULL);
+
+        if (swapchain->desc.windowed)
+            ReleaseDC(swapchain->win_handle, hdc);
+        else
+            DeleteDC(hdc);
+    }
+}
+
 void wined3d_swapchain_activate(struct wined3d_swapchain *swapchain, BOOL activate)
 {
     struct wined3d_device *device = swapchain->device;
diff --git a/dlls/wined3d/wined3d_gl.h b/dlls/wined3d/wined3d_gl.h
index 2cb2d96..2ae19e7 100644
--- a/dlls/wined3d/wined3d_gl.h
+++ b/dlls/wined3d/wined3d_gl.h
@@ -171,6 +171,7 @@ enum wined3d_gl_extension
     WGL_EXT_SWAP_CONTROL,
     WGL_WINE_PIXEL_FORMAT_PASSTHROUGH,
     WGL_WINE_GPU_INFO,
+    WGL_WINE_SURFACE,
     /* Internally used */
     WINED3D_GL_BLEND_EQUATION,
     WINED3D_GL_NORMALIZED_TEXRECT,
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 8383a1d..fcafcd64 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -1333,6 +1333,7 @@ struct wined3d_context
     HWND restore_pf_win;
     HGLRC                   glCtx;
     HWND                    win_handle;
+    HANDLE                  surface;
     HDC                     hdc;
     int pixel_format;
     GLint                   aux_buffers;
@@ -2613,7 +2614,7 @@ void wined3d_surface_prepare(struct wined3d_surface *surface, struct wined3d_con
 void surface_set_compatible_renderbuffer(struct wined3d_surface *surface,
         const struct wined3d_surface *rt) DECLSPEC_HIDDEN;
 void surface_set_texture_target(struct wined3d_surface *surface, GLenum target, GLint level) DECLSPEC_HIDDEN;
-void surface_translate_drawable_coords(const struct wined3d_surface *surface, HWND window, RECT *rect) DECLSPEC_HIDDEN;
+void surface_translate_drawable_coords(const struct wined3d_surface *surface, const struct wined3d_context *context, RECT *rect) DECLSPEC_HIDDEN;
 /*HRESULT wined3d_surface_unmap(struct wined3d_surface *surface) DECLSPEC_HIDDEN; */
 HRESULT wined3d_surface_update_desc(struct wined3d_surface *surface,
         const struct wined3d_gl_info *gl_info, void *mem, unsigned int pitch) DECLSPEC_HIDDEN;
@@ -2992,6 +2993,7 @@ struct wined3d_swapchain
 
     HWND win_handle;
     HWND device_window;
+    HANDLE surface;
 
     HDC backup_dc;
     HWND backup_wnd;
@@ -3004,6 +3006,7 @@ struct wined3d_context *swapchain_get_context(struct wined3d_swapchain *swapchai
 void swapchain_destroy_contexts(struct wined3d_swapchain *swapchain) DECLSPEC_HIDDEN;
 HDC swapchain_get_backup_dc(struct wined3d_swapchain *swapchain) DECLSPEC_HIDDEN;
 void swapchain_update_draw_bindings(struct wined3d_swapchain *swapchain) DECLSPEC_HIDDEN;
+void swapchain_update_surface(struct wined3d_swapchain *swapchain) DECLSPEC_HIDDEN;
 
 /*****************************************************************************
  * Utility function prototypes
